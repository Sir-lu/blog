[ 2019-01-05T17:25:58+08:00 ] 223.72.56.102 /index.php/Admin/Index/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000031s ]
INFO: [ app_init ] --END-- [ RunTime:0.000346s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000476s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000508s ]
SQL: SHOW COLUMNS FROM `lxp_oauth_user` [ RunTime:0.0010s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_oauth_user` WHERE `is_admin` = 1 LIMIT 1   [ RunTime:0.0003s ]

[ 2019-01-05T17:25:58+08:00 ] 223.72.56.102 /Admin/Login/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000286s ]
INFO: [ app_init ] --END-- [ RunTime:0.000547s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001951s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003176s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0011s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0008s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_link` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_link` WHERE `is_delete` = 0 AND `is_show` = 1 ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_oauth_user` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_oauth_user` WHERE `is_admin` = 1 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000051s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000124s ]
NOTIC: [8] Undefined index: ADMIN_PASSWORD /www/wwwroot/blog/Runtime/Cache/Admin/b891abcc3bb76636e2a96a245e9568d6.php 第 6 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005162s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005185s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000123s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000143s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000514s ]
INFO: [ app_end ] --END-- [ RunTime:0.000536s ]

[ 2019-01-05T17:25:59+08:00 ] 223.72.56.102 /Admin/Login/showVerify
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000234s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000304s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000330s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0008s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0007s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_link` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_link` WHERE `is_delete` = 0 AND `is_show` = 1 ORDER BY sort  [ RunTime:0.0003s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000583s ]
INFO: [ app_end ] --END-- [ RunTime:0.000650s ]

[ 2019-01-05T17:26:18+08:00 ] 223.72.56.102 /Admin/Login/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000279s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000341s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000401s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0014s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_link` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_link` WHERE `is_delete` = 0 AND `is_show` = 1 ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_oauth_user` [ RunTime:0.0007s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_oauth_user` WHERE `is_admin` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_config` [ RunTime:0.0027s ]
SQL: SELECT `value` FROM `lxp_config` WHERE `name` = 'ADMIN_PASSWORD' LIMIT 1   [ RunTime:0.0014s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000029s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000068s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005142s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005170s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000142s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000168s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000477s ]
INFO: [ app_end ] --END-- [ RunTime:0.000507s ]

[ 2019-01-05T17:26:18+08:00 ] 223.72.56.102 /Admin/Login/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000014s ]
INFO: [ app_init ] --END-- [ RunTime:0.000406s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000443s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000480s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0012s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0010s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0010s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_link` [ RunTime:0.0012s ]
SQL: SELECT * FROM `lxp_link` WHERE `is_delete` = 0 AND `is_show` = 1 ORDER BY sort  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_oauth_user` [ RunTime:0.0014s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_oauth_user` WHERE `is_admin` = 1 LIMIT 1   [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000043s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000106s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006712s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006756s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000158s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000190s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000562s ]
INFO: [ app_end ] --END-- [ RunTime:0.000611s ]

[ 2019-01-05T17:26:19+08:00 ] 223.72.56.102 /Admin/Login/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000287s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000327s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000354s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0013s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_link` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_link` WHERE `is_delete` = 0 AND `is_show` = 1 ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_oauth_user` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_oauth_user` WHERE `is_admin` = 1 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000043s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000094s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.003956s ]
INFO: [ view_parse ] --END-- [ RunTime:0.003982s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000105s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000131s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000382s ]
INFO: [ app_end ] --END-- [ RunTime:0.000409s ]

[ 2019-01-05T17:26:20+08:00 ] 223.72.56.102 /Admin/Login/showVerify
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000240s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000327s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000352s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0010s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0008s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0007s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_link` [ RunTime:0.0009s ]
SQL: SELECT * FROM `lxp_link` WHERE `is_delete` = 0 AND `is_show` = 1 ORDER BY sort  [ RunTime:0.0004s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000403s ]
INFO: [ app_end ] --END-- [ RunTime:0.000450s ]

[ 2019-01-05T17:26:25+08:00 ] 223.72.56.102 /Admin/Login/showVerify
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000028s ]
INFO: [ app_init ] --END-- [ RunTime:0.000248s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000356s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000399s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0013s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_link` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_link` WHERE `is_delete` = 0 AND `is_show` = 1 ORDER BY sort  [ RunTime:0.0002s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000540s ]
INFO: [ app_end ] --END-- [ RunTime:0.000612s ]

[ 2019-01-05T17:26:41+08:00 ] 223.72.56.102 /Admin/Login/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000015s ]
INFO: [ app_init ] --END-- [ RunTime:0.000357s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000521s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000569s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0012s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0010s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0009s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_link` [ RunTime:0.0011s ]
SQL: SELECT * FROM `lxp_link` WHERE `is_delete` = 0 AND `is_show` = 1 ORDER BY sort  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_oauth_user` [ RunTime:0.0011s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_oauth_user` WHERE `is_admin` = 1 LIMIT 1   [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_config` [ RunTime:0.0007s ]
SQL: SELECT `value` FROM `lxp_config` WHERE `name` = 'ADMIN_PASSWORD' LIMIT 1   [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000039s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000084s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004990s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005025s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000113s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000138s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000507s ]
INFO: [ app_end ] --END-- [ RunTime:0.000536s ]

[ 2019-01-05T17:26:43+08:00 ] 223.72.56.102 /Admin/Index/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000249s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000366s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000399s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000078s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000106s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005738s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005771s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000121s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000141s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000392s ]
INFO: [ app_end ] --END-- [ RunTime:0.000421s ]

[ 2019-01-05T17:26:43+08:00 ] 223.72.56.102 /Admin/Index/welcome
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000263s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000328s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000369s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0011s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_chat` [ RunTime:0.0015s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_comment` [ RunTime:0.0009s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_comment` LIMIT 1   [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000048s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000078s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004453s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004482s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000126s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000151s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000558s ]
INFO: [ app_end ] --END-- [ RunTime:0.000583s ]

[ 2019-01-05T17:27:52+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000227s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000303s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000327s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0015s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000076s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000127s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007866s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007910s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000229s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000258s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000477s ]
INFO: [ app_end ] --END-- [ RunTime:0.000508s ]

[ 2019-01-05T17:30:37+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000268s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000305s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000331s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0024s ]
SQL: INSERT INTO `lxp_article` (`cid`,`title`,`author`,`keywords`,`description`,`is_original`,`is_top`,`is_show`,`content`,`click`,`is_delete`,`addtime`) VALUES ('32','分布式Session共享的4类技术方案，与优劣势比较','鹿晓鹏','php，分布式，Session，共享的4类技术方案，与优劣势比较','分布式Session共享的4类技术方案，与优劣势比较','1','1','1','&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;什么是session&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;服务器为&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;每个用户创建一个会话，存储用户的相关信息&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;，以便多次请求能够定位到同一个上下文。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;Web开发中，web-server可以自动为同一个浏览器的访问用户自动创建session，提供数据存储功能。最常见的，会把&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;用户的登录信息、用户信息存储在session中，以保持登录状态&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;什么是session一致性问题？&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;只要用户不重启浏览器，每次http短连接请求，理论上服务端都能定位到session，保持会话。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分布式session&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;单服务器web应用中，session信息只需存在该服务器中，这是我们前几年最常接触的方式，但是近几年随着分布式系统的流行，单系统已经不能满足日益增长的百万级用户的需求，集群方式部署服务器已在很多公司运用起来，当高并发量的请求到达服务端的时候通过负载均衡的方式分发到集群中的某个服务器，这样就有可能&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;导致同一个用户的多次请求被分发到集群的不同服务器上，就会出现取不到session数据的情况，于是session的共享就成了一个问题&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;这个时候就需要解决Session一致性。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;Session一致性解决方案&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/Upload/image/ueditor/20190105/1546680629573049.png&quot; title=&quot;鹿晓鹏博客&quot; alt=&quot;鹿晓鹏博客&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1、session复制&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;session复制是早期的企业级的使用比较多的一种服务器集群session管理机制。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;应用服务器开启web容器的session复制功能，在集群中的几台服务器之间同步session对象，使得每台服务器上都保存所有的session信息，这样任何一台宕机都不会导致session的数据丢失，服务器使用session时，直接从本地获取。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;简介&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：将一台机器上的Session数据广播复制到集群中其余机器上&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;session复制使用场景&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：机器较少，网络流量较小&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;优点&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：实现简单、配置较少、当网络中有机器Down掉时不影响用户访问&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;缺点&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：广播式复制到其余机器有一定廷时，带来一定网络开销。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;这种方式在应用集群达到数千台的时候，就会出现瓶颈，每台都需要备份session，出现内存不够用的情况。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2、session绑定&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;利用hash算法，比如nginx的ip_hash,使得同一个Ip的请求分发到同一台服务器上。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;session绑定使用场景&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：机器数适中、对稳定性要求不是非常苛刻&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;优点&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：实现简单、配置方便、没有额外网络开销&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;缺点&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：网络中有机器Down掉时、用户Session会丢失、容易造成单点故障。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;这种方式不符合对系统的高可用要求，因为一旦某台服务器宕机，那么该机器上的session也就不复存在了，用户请求切换到其他机器后么有session，无法完成业务处理。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3、利用cookie记录session&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;session记录在客户端，每次请求服务器的时候，将session放在请求中发送给服务器，服务器处理完请求后再将修改后的session响应给客户端，&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;这里的客户端就是cookie。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;缺点&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如受cookie大小的限制，能记录的信息有限；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;每次请求响应都需要传递cookie，影响性能，如果用户关闭cookie，访问就不正常。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;优点：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;cookie的简单易用，可用性高，支持应用服务器的线性伸缩，而大部分要记录的session信息比较小，因此事实上，许多网站或多或少的在使用cookie记录session。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4、session服务器&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;session服务器可以解决上面的所有的问题&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;，&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;利用独立部署的session服务器（集群）统一管理session，服务器每次读写session时，都访问session服务器&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;这种解决方案事实上是应用服务器的状态分离，分为无状态的应用服务器和有状态的session服务器，然后针对这两种服务器的不同特性分别设计架构。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;对于有状态的session服务器，一种比较简单的方法是利用分布式缓存（redis、memcached), 或者存储在数据库(如MySQL)等。在这些产品的基础上进行包装，使其符合session的存储和访问要求。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如果业务场景对session管理有比较高的要求，比如利用session服务基层单点登录（sso),用户服务器等功能，需要开发专门的session服务管理平台。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;session服务器使用场景&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：集群中机器数多、网络环境复杂。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;优点&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：可靠性好&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;缺点&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;：实现复杂、稳定性依赖于缓存的稳定性、Session信息放入缓存时要有合理的策略写入。&lt;/span&gt;&lt;/p&gt;','0','0','1546680637') [ RunTime:0.0300s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0010s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('38','24') [ RunTime:0.0027s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('38','27') [ RunTime:0.0024s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0012s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('38','/Upload/image/ueditor/php.jpeg') [ RunTime:0.0055s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SELECT `aid`,`addtime` FROM `lxp_article` WHERE `is_show` = 1 AND `is_delete` = 0 ORDER BY aid desc  [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000095s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004105s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004135s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000114s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000190s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000438s ]
INFO: [ app_end ] --END-- [ RunTime:0.000461s ]

[ 2019-01-05T17:30:38+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000322s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000377s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000403s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0014s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0097s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0009s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0006s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0008s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '25'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 25 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '23'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 23 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 33  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '24'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 24 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '22'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 22 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000121s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.022472s ]
INFO: [ view_parse ] --END-- [ RunTime:0.022520s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000141s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000161s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000432s ]
INFO: [ app_end ] --END-- [ RunTime:0.000468s ]

[ 2019-01-05T17:32:00+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000228s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000279s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000310s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0034s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0095s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000096s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005739s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005765s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000309s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000332s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000387s ]
INFO: [ app_end ] --END-- [ RunTime:0.000411s ]

[ 2019-01-05T17:33:31+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000015s ]
INFO: [ app_init ] --END-- [ RunTime:0.000399s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000843s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000897s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0015s ]
SQL: INSERT INTO `lxp_article` (`cid`,`title`,`author`,`keywords`,`description`,`is_original`,`is_top`,`is_show`,`content`,`click`,`is_delete`,`addtime`) VALUES ('34','Mysql优化方案','鹿晓鹏','Myslq，优化，php','Mysql优化方案','1','0','1','&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL优化方案&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;Mysql的优化，大体可以分为三部分：索引的优化，sql语句的优化，表的优化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&quot;/Upload/image/ueditor/20190105/1546680794617280.png&quot; title=&quot;鹿晓鹏博客&quot; alt=&quot;鹿晓鹏博客&quot;/&gt;&lt;/p&gt;&lt;h1 style=&quot;margin: 5px 0px; line-height: 35px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; white-space: normal; font-size: 24px; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;索引优化&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;一般的应用系统，读写比例在10：1左右，而且插入操作和一般的更新操作很少出现性能问题，在生产环境中，我们遇到最多的也是最容易出现问题的，还是一些复杂的查询操作，因此对查询语句的优化是重中之重，&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;加速查询最好的方法就是索引。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;索引：简单的说，相当于图书的目录，可以帮助用户快速的找到需要的内容。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;在MySQL中也叫做“键”，是存储引擎用于快速找到记录的一种数据结构。能够大大提高查询效率。特别是当数据量非常大，查询涉及多个表时，使用索引往往能使查询速度加快成千上万倍。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;总结：索引的目的在于提高查询效率，与我们查询图书所用的目录是一个道理：先定位到章，然后定位到该章下的一个小结，然后找到页数。相似的例子还有：查字典，查地图等。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.索引类型&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;普通索引&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote style=&quot;margin: 15px auto; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 233, 198); border-image: initial; padding: 5px 15px 10px; background: rgb(244, 245, 246); white-space: normal; color: rgb(153, 153, 153); font-family: &amp;quot;&amp;quot;;&quot;&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;是最基本的索引，它没有任何限制。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;唯一索引&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。&lt;/pre&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;组合索引&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。&lt;/pre&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;主键索引&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote style=&quot;margin: 15px auto; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 233, 198); border-image: initial; padding: 5px 15px 10px; background: rgb(244, 245, 246); white-space: normal; color: rgb(153, 153, 153); font-family: &amp;quot;&amp;quot;;&quot;&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;全文索引&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote style=&quot;margin: 15px auto; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 233, 198); border-image: initial; padding: 5px 15px 10px; background: rgb(244, 245, 246); white-space: normal; color: rgb(153, 153, 153); font-family: &amp;quot;&amp;quot;;&quot;&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的where语句的参数匹配。fulltext索引配合match against操作使用，而不是一般的where语句加like。它可以在create table，alter table ，create index使用，不过目前只有char、varchar，text 列上可以创建全文索引。值得一提的是，在数据量较大时候，现将数据放入一个没有全局索引的表中，然后再用CREATE index创建fulltext索引，要比先为一张表建立fulltext然后再将数据写入的速度快很多。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.索引优化&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;只要列中含有NULL值，就最好不要在此例设置索引，复合索引如果有NULL值，此列在使用时也不会使用索引&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;尽量使用短索引，如果可以，应该制定一个前缀长度&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;对于经常在where子句使用的列，最好设置索引，这样会加快查找速度&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;对于有多个列where或者order by子句的，应该建立复合索引&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;对于like语句，以%或者‘-’开头的不会使用索引，以%结尾会使用索引&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;尽量不要在列上进行运算（函数操作和表达式操作）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;尽量不要使用not in和&amp;lt;&amp;gt;操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;SQL慢查询的优化&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/Upload/image/ueditor/20190105/1546680780450290.png&quot; title=&quot;鹿晓鹏博客&quot; alt=&quot;鹿晓鹏博客&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.如何捕获低效sql&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1）slow_query_log&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;这个参数设置为ON，可以捕获执行时间超过一定数值的SQL语句。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2）ong_query_time&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;当SQL语句执行时间超过此数值时，就会被记录到日志中，建议设置为1或者更短。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3）slow_query_log_file&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;记录日志的文件名。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4）log_queries_not_using_indexes&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;这个参数设置为ON，可以捕获到所有未使用索引的SQL语句，尽管这个SQL语句有可能执行得挺快。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.慢查询优化的基本步骤&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1)先运行看看是否真的很慢，注意设置SQL_NO_CACHE&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2）where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3)explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4)order by limit 形式的sql语句让排序的表优先查&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5)了解业务方使用场景&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6)加索引时参照建索引的几大原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;7)观察结果，不符合预期继续从1开始分析&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.优化原则&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;查询时，能不要*就不用*，尽量写全字段名&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;大部分情况连接效率远大于子查询&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;多使用explain和profile分析查询语句&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;查看慢查询日志，找出执行时间长的sql语句优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;多表连接时，尽量小表驱动大表，即小表 join 大表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;在千万级分页时使用limit&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;对于经常使用的查询，可以开启缓存&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据库表优化&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;表的字段尽可能用NOT NULL&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;字段长度固定的表查询会更快&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;把数据库的大表按时间或一些标志分成小表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;将表拆分&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据表拆分：主要就是垂直拆分和水平拆分。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;水平切分:将记录散列到不同的表中，各表的结构完全相同，每次从分表中查询, 提高效率。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;垂直切分:将表中大字段单独拆分到另外一张表, 形成一对一的关系。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;总之：&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;Mysql的优化主要就在于：索引的优化，sql语句的优化，表的优化，在高并发网络环境下，除了优化数据库外，还会涉及到分布式缓存，CDN，数据库读写分离等高并发优化技术。&lt;/span&gt;&lt;/p&gt;&lt;hr style=&quot;margin: 20px 0px; border-right: 0px; border-left: 0px; border-image: initial; border-top-style: solid; border-top-color: rgb(238, 238, 238); border-bottom-style: solid; border-bottom-color: rgb(255, 255, 255); color: rgb(85, 85, 85); font-family: &amp;quot;Microsoft Yahei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, Helvetica, Arial, sans-serif; font-size: 15px; white-space: normal;&quot;/&gt;&lt;p&gt;&lt;span class=&quot;fa fa-bullhorn&quot; style=&quot;display: inline-block; font-family: FontAwesome; line-height: 1; -webkit-font-smoothing: antialiased; width: 16px; font-size: inherit; font-stretch: normal; font-feature-settings: normal; font-kerning: auto; font-variant-numeric: normal; font-variant-east-asian: normal; text-rendering: auto; text-indent: -20px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;','0','0','1546680811') [ RunTime:0.0126s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0009s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('39','26') [ RunTime:0.0035s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0010s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('39','/Upload/image/ueditor/mysql.jpg') [ RunTime:0.0055s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0011s ]
SQL: SELECT `aid`,`addtime` FROM `lxp_article` WHERE `is_show` = 1 AND `is_delete` = 0 ORDER BY aid desc  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000035s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000109s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005296s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005337s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000114s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000135s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000617s ]
INFO: [ app_end ] --END-- [ RunTime:0.000649s ]

[ 2019-01-05T17:33:33+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000015s ]
INFO: [ app_init ] --END-- [ RunTime:0.000271s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000414s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000442s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0014s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0093s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0009s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0007s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '25'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 25 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '23'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 23 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 33  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '24'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 24 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000044s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000072s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006058s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006087s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000107s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000126s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000357s ]
INFO: [ app_end ] --END-- [ RunTime:0.000385s ]

[ 2019-01-05T17:34:39+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000027s ]
INFO: [ app_init ] --END-- [ RunTime:0.000352s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000350s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000377s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0017s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0007s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000109s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005878s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005907s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000130s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000149s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000452s ]
INFO: [ app_end ] --END-- [ RunTime:0.000476s ]

[ 2019-01-05T17:35:27+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000236s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000287s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000317s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0016s ]
SQL: INSERT INTO `lxp_article` (`cid`,`title`,`author`,`keywords`,`description`,`is_original`,`is_top`,`is_show`,`content`,`click`,`is_delete`,`addtime`) VALUES ('34','Mysql常用储存引擎介绍','鹿晓鹏','Mysql，php，mysql引擎','Mysql常用储存引擎介绍','1','1','1','&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;经常面试都会问到MYSQL有哪些存储引擎，以及各自的优缺点。今天主要分享常见的存储引擎：MyISAM、InnoDB、MERGE、MEMORY(HEAP)、BDB(BerkeleyDB)等，以及最常用的MyISAM与InnoDB两个引擎 ，文章尾部有两者的详细比较。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL常用存储引擎介绍&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.InnoDB 引擎(MySQL5.5以后默认使用)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL 5.5 及以后版本中的默认存储引擎，他的优点如下：&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;灾难恢复性好&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;支持事务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;使用行级锁&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;支持外键关联&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;支持热备份&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;对于InnoDB引擎中的表，其数据的物理组织形式是簇表（Cluster Table），主键索引和数据是在一起的，数据按主键的顺序物理分布&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;实现了缓冲管理，不仅能缓冲索引也能缓冲数据，并且会自动创建散列索引以加快数据的获取&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;支持热备份&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.MyISAM引擎&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;特性如下：&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;不支持事务&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;使用表级锁，并发性差&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;主机宕机后，MyISAM表易损坏，灾难恢复性不佳&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;可以配合锁，实现操作系统下的复制备份、迁移&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;只缓存索引，数据的缓存是利用操作系统缓冲区来实现的。可能引发过多的系统调用且效率不佳&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据紧凑存储，因此可获得更小的索引和更快的全表扫描性能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.MEMORY 存储引擎&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;提供内存表，也不支持事务和外键。显著提高访问数据的速度，可用于缓存会频繁访问的、可以重构的数据、计算结果、统计值、中间结果。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;缺点如下：&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;使用表级锁，虽然内存访问快，但如果频繁的读写，表级锁会成为瓶颈&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;只支持固定大小的行。Varchar类型的字段会存储为固定长度的Char类型，浪费空间&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;不支持TEXT、BLOB字段。当有些查询需要使用到临时表（使用的也是MEMORY存储引擎）时，如果表中有TEXT、BLOB字段，那么会转换为基于磁盘的MyISAM表，严重降低性能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;由于内存资源成本昂贵，一般不建议设置过大的内存表，如果内存表满了，可通过清除数据或调整内存表参数来避免报错&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;服务器重启后数据会丢失，复制维护时需要小心&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL存储引擎MyISAM与InnoDB如何选择&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.两种存储引擎的大致区别表现在：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1）InnoDB支持事务，MyISAM不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而MyISAM就不可以了。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2）MyISAM适合查询以及插入为主的应用，InnoDB适合频繁修改以及涉及到安全性较高的应用&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3）InnoDB支持外键，MyISAM不支持&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4）从MySQL5.5.5以后，InnoDB是默认引擎&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5）InnoDB不支持FULLTEXT类型的索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6）InnoDB中不保存表的行数，如select count(*) from table时，InnoDB需要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。注意的是，当count(*)语句包含where条件时MyISAM也需要扫描整个表。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;7）对于自增长的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中可以和其他字段一起建立联合索引。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;8）清空整个表时，InnoDB是一行一行的删除，效率非常慢。MyISAM则会重建表。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;9）InnoDB支持行锁（某些情况下还是锁整表，如 update table set a=1 where user like ‘%lee%’&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;有人说MYISAM只能用于小型应用，其实这只是一种偏见。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如果数据量比较大，这是需要通过升级架构来解决，比如分表分库，读写分离，而不是单纯地依赖存储引擎。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;现在一般都是选用InnoDB了，主要是MyISAM的全表锁，读写串行问题，并发效率锁表，效率低，MyISAM对于读写密集型应用一般是不会去选用的。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;总之：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.MyISAM类型的表强调的是性能，其执行速度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持已经外部键等高级数据库功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;','0','0','1546680927') [ RunTime:0.0214s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0012s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('40','26') [ RunTime:0.0059s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0009s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('40','/Upload/image/ueditor/mysql.jpg') [ RunTime:0.0040s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0016s ]
SQL: SELECT `aid`,`addtime` FROM `lxp_article` WHERE `is_show` = 1 AND `is_delete` = 0 ORDER BY aid desc  [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000034s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000111s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005214s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005242s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000123s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000143s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000445s ]
INFO: [ app_end ] --END-- [ RunTime:0.000467s ]

[ 2019-01-05T17:35:28+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000238s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000296s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000321s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0010s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0050s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0010s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0006s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0007s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0004s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '25'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 25 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '23'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 23 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 33  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000050s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000104s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006699s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006765s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000139s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000205s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000347s ]
INFO: [ app_end ] --END-- [ RunTime:0.000374s ]

[ 2019-01-05T17:35:32+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/40
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000266s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000305s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000331s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0016s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 40 LIMIT 1   [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 40  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0012s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000088s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000150s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007762s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007789s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000110s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000159s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000382s ]
INFO: [ app_end ] --END-- [ RunTime:0.000410s ]

[ 2019-01-05T17:43:25+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000255s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000315s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000349s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0017s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0013s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000056s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000084s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004941s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004972s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000150s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000170s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000343s ]
INFO: [ app_end ] --END-- [ RunTime:0.000368s ]

[ 2019-01-05T17:44:15+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000245s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000391s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000419s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0014s ]
SQL: INSERT INTO `lxp_article` (`cid`,`title`,`author`,`keywords`,`description`,`is_original`,`is_top`,`is_show`,`content`,`click`,`is_delete`,`addtime`) VALUES ('34','MySQLMySQL数据库的索引原理、与慢SQL优化的5大原则','鹿晓鹏','MySQL','MySQLMySQL数据库的索引原理、与慢SQL优化的5大原则','1','0','1','&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL凭借着出色的性能、低廉的成本、丰富的资源，已经成为绝大多数互联网公司的首选关系型数据库。虽然性能出色，但所谓“好马配好鞍”，如何能够更好的使用它，已经成为开发工程师的必修课，我们经常会从职位描述上看到诸如“精通MySQL”、“SQL语句优化”、“了解数据库原理”等要求。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们知道一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;本文旨在以开发工程师的角度来解释数据库索引的原理和如何优化慢查询。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL索引原理&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.索引目的&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？&lt;/span&gt;&lt;/p&gt;&lt;h1 style=&quot;margin: 5px 0px; line-height: 35px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; white-space: normal; font-size: 24px; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.索引原理&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&amp;gt;、&amp;lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的，数据库实现比较复杂，数据保存在磁盘上，而为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.磁盘IO与预读&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;前面提到了访问磁盘，那么这里先简单介绍一下磁盘IO和预读，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分，寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms；传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错的，但要知道一台500 -MIPS的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行40万条指令，数据库动辄十万百万乃至千万级数据，每次9毫秒的时间，显然是个灾难。下图是计算机硬件延迟的对比图，供大家参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p9.pstatp.com/large/pgc-image/153933367186953a1c67f18&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.索引的数据结构&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;前面讲了生活中索引的例子，索引的基本原理，数据库的复杂性，又讲了操作系统的相关知识，目的就是让大家了解，任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;5.详解b+树&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p98.pstatp.com/large/pgc-image/1539333671879b9b9b10ac3&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;6.b+树的查找过程&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;7.b+树性质&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询优化&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;关于MySQL索引原理是比较枯燥的东西，大家只需要有一个感性的认识，并不需要理解得非常透彻和深入。我们回头来看看一开始我们说的慢查询，了解完索引原理之后，大家是不是有什么想法呢？先总结一下索引的几大基本原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;建索引的几大原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.最左前缀匹配原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&amp;gt;、&amp;lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &amp;gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.=和in可以乱序&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.尽量选择区分度高的列作为索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.索引列不能参与计算，保持列“干净”&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;5.尽量的扩展索引，不要新建索引。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;查询优化神器 – explain命令&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;关于explain命令相信大家并不陌生，具体用法和字段含义可以参考官网explain-output，这里需要强调rows是核心指标，绝大部分rows小的语句执行一定很快（有例外，下面会讲到）。所以优化语句基本上都是在优化rows。&lt;/span&gt;&lt;/p&gt;&lt;h1 style=&quot;margin: 5px 0px; line-height: 35px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; white-space: normal; font-size: 24px; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询优化基本步骤&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先运行看看是否真的很慢，注意设置SQL_NO_CACHE&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3.order by limit 形式的sql语句让排序的表优先查&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.了解业务方使用场景&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.加索引时参照建索引的几大原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.观察结果，不符合预期继续从0分析&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询案例&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;下面几个例子详细解释了如何分析和优化慢查询&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;复杂语句写法&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;很多情况下，我们写SQL只是为了实现功能，这只是第一步，不同的语句书写方式对于效率往往有本质的差别，这要求我们对mysql的执行计划和索引原则有非常清楚的认识，请看下面的语句&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;distinct&amp;nbsp;cert.emp_id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join&amp;nbsp;(
&amp;nbsp;select
&amp;nbsp;emp.id&amp;nbsp;as&amp;nbsp;emp_id,
&amp;nbsp;emp_cert.id&amp;nbsp;as&amp;nbsp;cert_id&amp;nbsp;
&amp;nbsp;from
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;left&amp;nbsp;join
&amp;nbsp;emp_certificate&amp;nbsp;emp_cert&amp;nbsp;
&amp;nbsp;on&amp;nbsp;emp.id&amp;nbsp;=&amp;nbsp;emp_cert.emp_id&amp;nbsp;
&amp;nbsp;where
&amp;nbsp;emp.is_deleted=0
&amp;nbsp;)&amp;nbsp;cert&amp;nbsp;
&amp;nbsp;on&amp;nbsp;(
&amp;nbsp;cl.ref_table=&amp;#39;Employee&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid=&amp;nbsp;cert.emp_id&amp;nbsp;)&amp;nbsp;
&amp;nbsp;or&amp;nbsp;(
&amp;nbsp;cl.ref_table=&amp;#39;EmpCertificate&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid=&amp;nbsp;cert.cert_id&amp;nbsp;)&amp;nbsp;where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;;&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先运行一下，53条记录 1.87秒，又没有用聚合语句，比较慢&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;53&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(1.87&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.explain&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where;&amp;nbsp;Using&amp;nbsp;temporary&amp;nbsp;||&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;&amp;lt;derived2&amp;gt;&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;63727&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where;&amp;nbsp;Using&amp;nbsp;join&amp;nbsp;buffer&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;DERIVED&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;13317&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;DERIVED&amp;nbsp;|&amp;nbsp;emp_cert&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;emp_certificate_empid&amp;nbsp;|&amp;nbsp;emp_certificate_empid&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.emp.id&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;index&amp;nbsp;|+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;简述一下执行计划，首先mysql根据idx_last_upd_date索引扫描cm_log表获得379条记录；然后查表扫描了63727条记录，分为两部分，derived表示构造表，也就是不存在的表，可以简单理解成是一个语句形成的结果集，后面的数字表示语句的ID。derived2表示的是ID = 2的查询构造了虚拟表，并且返回了63727条记录。我们再来看看ID = 2的语句究竟做了写什么返回了这么大量的数据，首先全表扫描employee表13317条记录，然后根据索引emp_certificate_empid关联emp_certificate表，rows = 1表示，每个关联都只锁定了一条记录，效率比较高。获得后，再和cm_log的379条记录根据规则关联。从执行过程上可以看出返回了太多的数据，返回的数据绝大部分cm_log都用不到，因为cm_log只锁定了379条记录。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如何优化呢？可以看到我们在运行完后还是要和cm_log做join,那么我们能不能之前和cm_log做join呢？仔细分析语句不难发现，其基本思想是如果cm_log的ref_table是EmpCertificate就关联emp_certificate表，如果ref_table是Employee就关联employee表，我们完全可以拆成两部分，并用union连接起来，注意这里用union，而不用union all是因为原语句有“distinct”来得到唯一的记录，而union恰好具备了这种功能。如果原语句中没有distinct不需要去重，我们就可以直接使用union all了，因为使用union需要去重的动作，会影响SQL性能。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;优化过的语句如下&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;emp.id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;on&amp;nbsp;cl.ref_table&amp;nbsp;=&amp;nbsp;&amp;#39;Employee&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid&amp;nbsp;=&amp;nbsp;emp.id&amp;nbsp;
where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;emp.is_deleted&amp;nbsp;=&amp;nbsp;0&amp;nbsp;unionselect
&amp;nbsp;emp.id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;emp_certificate&amp;nbsp;ec&amp;nbsp;
&amp;nbsp;on&amp;nbsp;cl.ref_table&amp;nbsp;=&amp;nbsp;&amp;#39;EmpCertificate&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid&amp;nbsp;=&amp;nbsp;ec.id&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;on&amp;nbsp;emp.id&amp;nbsp;=&amp;nbsp;ec.emp_id&amp;nbsp;
where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;emp.is_deleted&amp;nbsp;=&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.不需要了解业务场景，只需要改造的语句和改造之前的语句保持结果一致&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.现有索引可以满足，不需要建索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.用改造后的语句实验一下，只需要10ms 降低了近200倍！&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.cl.ref_oid&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;ec&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY,emp_certificate_empid&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.cl.ref_oid&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.ec.emp_id&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;RESULT&amp;nbsp;|&amp;nbsp;&amp;lt;union1,2&amp;gt;&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;|+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+53&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(0.01&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;明确应用场景&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;举这个例子的目的在于颠覆我们对列的区分度的认知，一般上我们认为区分度越高的列，越容易锁定更少的记录，但在一些特殊的情况下，这种理论是有局限性的&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;*&amp;nbsp;from
&amp;nbsp;stage_poi&amp;nbsp;sp&amp;nbsp;
where
&amp;nbsp;sp.accurate_result=1&amp;nbsp;
&amp;nbsp;and&amp;nbsp;(
&amp;nbsp;sp.sync_status=0&amp;nbsp;
&amp;nbsp;or&amp;nbsp;sp.sync_status=2&amp;nbsp;
&amp;nbsp;or&amp;nbsp;sp.sync_status=4
&amp;nbsp;);&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先看看运行多长时间,951条数据6.22秒，真的很慢&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;951&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(6.22&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.先explain，rows达到了361万，type = ALL表明是全表扫描&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;SIMPLE&amp;nbsp;|&amp;nbsp;sp&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;3613155&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;|+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.所有字段都应用查询返回记录数，因为是单表查询 0已经做过了951条&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3.让explain的rows 尽量逼近951&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;看一下accurate_result = 1的记录数&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select&amp;nbsp;count(*),accurate_result&amp;nbsp;from&amp;nbsp;stage_poi&amp;nbsp;group&amp;nbsp;by&amp;nbsp;accurate_result;+----------+-----------------+|&amp;nbsp;count(*)&amp;nbsp;|&amp;nbsp;accurate_result&amp;nbsp;|+----------+-----------------+|&amp;nbsp;1023&amp;nbsp;|&amp;nbsp;-1&amp;nbsp;||&amp;nbsp;2114655&amp;nbsp;|&amp;nbsp;0&amp;nbsp;||&amp;nbsp;972815&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|+----------+-----------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们看到accurate_result这个字段的区分度非常低，整个表只有-1,0,1三个值，加上索引也无法锁定特别少量的数据&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;再看一下sync_status字段的情况&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select&amp;nbsp;count(*),sync_status&amp;nbsp;from&amp;nbsp;stage_poi&amp;nbsp;group&amp;nbsp;by&amp;nbsp;sync_status;+----------+-------------+|&amp;nbsp;count(*)&amp;nbsp;|&amp;nbsp;sync_status&amp;nbsp;|+----------+-------------+|&amp;nbsp;3080&amp;nbsp;|&amp;nbsp;0&amp;nbsp;||&amp;nbsp;3085413&amp;nbsp;|&amp;nbsp;3&amp;nbsp;|+----------+-------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;同样的区分度也很低，根据理论，也不适合建立索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;问题分析到这，好像得出了这个表无法优化的结论，两个列的区分度都很低，即便加上索引也只能适应这种情况，很难做普遍性的优化，比如当sync_status 0、3分布的很平均，那么锁定记录也是百万级别的&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.找业务方去沟通，看看使用场景。业务方是这么来使用这个SQL语句的，每隔五分钟会扫描符合条件的数据，处理完成后把sync_status这个字段变成1,五分钟符合条件的记录数并不会太多，1000个左右。了解了业务方的使用场景后，优化这个SQL就变得简单了，因为业务方保证了数据的不平衡，如果加上索引可以过滤掉绝大部分不需要的数据&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.根据建立索引规则，使用如下语句建立索引&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;alter&amp;nbsp;table&amp;nbsp;stage_poi&amp;nbsp;add&amp;nbsp;index&amp;nbsp;idx_acc_status(accurate_result,sync_status);&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.观察预期结果,发现只需要200ms，快了30多倍。&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;952&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(0.20&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们再来回顾一下分析问题的过程，单表查询相对来说比较好优化，大部分时候只需要把where条件里面的字段依照规则加上索引就好，如果只是这种“无脑”优化的话，显然一些区分度非常低的列，不应该加索引的列也会被加上索引，这样会对插入、更新性能造成严重的影响，同时也有可能影响其它的查询语句。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;所以我们第4步调差SQL的使用场景非常关键，我们只有知道这个业务场景，才能更好地辅助我们更好的分析和优化查询语句。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询的案例就分析到这儿，以上只是一些比较典型的案例。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们在优化过程中遇到过超过1000行，涉及到16个表join的“垃圾SQL”，也遇到过线上线下数据库差异导致应用直接被慢查询拖死，也遇到过varchar等值比较没有写单引号，还遇到过笛卡尔积查询直接把从库搞死。再多的案例其实也只是一些经验的积累，如果我们熟悉查询优化器、索引的内部原理，那么分析这些案例就变得特别简单了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;','0','0','1546681455') [ RunTime:0.0253s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('41','26') [ RunTime:0.0027s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0010s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('41','/Upload/image/ueditor/mysql.jpg') [ RunTime:0.0034s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0014s ]
SQL: SELECT `aid`,`addtime` FROM `lxp_article` WHERE `is_show` = 1 AND `is_delete` = 0 ORDER BY aid desc  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000030s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000070s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004002s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004030s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000103s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000123s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000388s ]
INFO: [ app_end ] --END-- [ RunTime:0.000410s ]

[ 2019-01-05T17:44:18+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000013s ]
INFO: [ app_init ] --END-- [ RunTime:0.000291s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000320s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000358s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0100s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0015s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0007s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 41 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0013s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '25'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 25 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000046s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000080s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005631s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005657s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000105s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000125s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000348s ]
INFO: [ app_end ] --END-- [ RunTime:0.000376s ]

[ 2019-01-05T17:44:27+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/41
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000014s ]
INFO: [ app_init ] --END-- [ RunTime:0.000363s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000302s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000327s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 41 LIMIT 1   [ RunTime:0.0006s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 41  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0012s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000106s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006429s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006455s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000131s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000159s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000355s ]
INFO: [ app_end ] --END-- [ RunTime:0.000383s ]

[ 2019-01-05T17:44:35+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/41
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000246s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000292s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000320s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0014s ]
SQL: UPDATE `lxp_article` SET `aid`='41',`cid`='34',`title`='MySQL数据库的索引原理、与慢SQL优化的5大原则',`author`='鹿晓鹏',`keywords`='MySQL',`description`='MySQLMySQL数据库的索引原理、与慢SQL优化的5大原则',`is_original`='1',`is_top`='0',`is_show`='1',`content`='&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL凭借着出色的性能、低廉的成本、丰富的资源，已经成为绝大多数互联网公司的首选关系型数据库。虽然性能出色，但所谓“好马配好鞍”，如何能够更好的使用它，已经成为开发工程师的必修课，我们经常会从职位描述上看到诸如“精通MySQL”、“SQL语句优化”、“了解数据库原理”等要求。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们知道一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;本文旨在以开发工程师的角度来解释数据库索引的原理和如何优化慢查询。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL索引原理&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.索引目的&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？&lt;/span&gt;&lt;/p&gt;&lt;h1 style=&quot;margin: 5px 0px; line-height: 35px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; white-space: normal; font-size: 24px; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.索引原理&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&amp;gt;、&amp;lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的，数据库实现比较复杂，数据保存在磁盘上，而为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.磁盘IO与预读&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;前面提到了访问磁盘，那么这里先简单介绍一下磁盘IO和预读，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分，寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms；传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错的，但要知道一台500 -MIPS的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行40万条指令，数据库动辄十万百万乃至千万级数据，每次9毫秒的时间，显然是个灾难。下图是计算机硬件延迟的对比图，供大家参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p9.pstatp.com/large/pgc-image/153933367186953a1c67f18&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.索引的数据结构&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;前面讲了生活中索引的例子，索引的基本原理，数据库的复杂性，又讲了操作系统的相关知识，目的就是让大家了解，任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;5.详解b+树&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p98.pstatp.com/large/pgc-image/1539333671879b9b9b10ac3&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;6.b+树的查找过程&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;7.b+树性质&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询优化&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;关于MySQL索引原理是比较枯燥的东西，大家只需要有一个感性的认识，并不需要理解得非常透彻和深入。我们回头来看看一开始我们说的慢查询，了解完索引原理之后，大家是不是有什么想法呢？先总结一下索引的几大基本原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;建索引的几大原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.最左前缀匹配原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&amp;gt;、&amp;lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &amp;gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.=和in可以乱序&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.尽量选择区分度高的列作为索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.索引列不能参与计算，保持列“干净”&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;5.尽量的扩展索引，不要新建索引。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;查询优化神器 – explain命令&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;关于explain命令相信大家并不陌生，具体用法和字段含义可以参考官网explain-output，这里需要强调rows是核心指标，绝大部分rows小的语句执行一定很快（有例外，下面会讲到）。所以优化语句基本上都是在优化rows。&lt;/span&gt;&lt;/p&gt;&lt;h1 style=&quot;margin: 5px 0px; line-height: 35px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; white-space: normal; font-size: 24px; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询优化基本步骤&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先运行看看是否真的很慢，注意设置SQL_NO_CACHE&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3.order by limit 形式的sql语句让排序的表优先查&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.了解业务方使用场景&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.加索引时参照建索引的几大原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.观察结果，不符合预期继续从0分析&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询案例&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;下面几个例子详细解释了如何分析和优化慢查询&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;复杂语句写法&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;很多情况下，我们写SQL只是为了实现功能，这只是第一步，不同的语句书写方式对于效率往往有本质的差别，这要求我们对mysql的执行计划和索引原则有非常清楚的认识，请看下面的语句&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;distinct&amp;nbsp;cert.emp_id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join&amp;nbsp;(
&amp;nbsp;select
&amp;nbsp;emp.id&amp;nbsp;as&amp;nbsp;emp_id,
&amp;nbsp;emp_cert.id&amp;nbsp;as&amp;nbsp;cert_id&amp;nbsp;
&amp;nbsp;from
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;left&amp;nbsp;join
&amp;nbsp;emp_certificate&amp;nbsp;emp_cert&amp;nbsp;
&amp;nbsp;on&amp;nbsp;emp.id&amp;nbsp;=&amp;nbsp;emp_cert.emp_id&amp;nbsp;
&amp;nbsp;where
&amp;nbsp;emp.is_deleted=0
&amp;nbsp;)&amp;nbsp;cert&amp;nbsp;
&amp;nbsp;on&amp;nbsp;(
&amp;nbsp;cl.ref_table=&amp;#39;Employee&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid=&amp;nbsp;cert.emp_id&amp;nbsp;)&amp;nbsp;
&amp;nbsp;or&amp;nbsp;(
&amp;nbsp;cl.ref_table=&amp;#39;EmpCertificate&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid=&amp;nbsp;cert.cert_id&amp;nbsp;)&amp;nbsp;where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;;&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先运行一下，53条记录 1.87秒，又没有用聚合语句，比较慢&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;53&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(1.87&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.explain&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where;&amp;nbsp;Using&amp;nbsp;temporary&amp;nbsp;||&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;&amp;lt;derived2&amp;gt;&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;63727&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where;&amp;nbsp;Using&amp;nbsp;join&amp;nbsp;buffer&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;DERIVED&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;13317&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;DERIVED&amp;nbsp;|&amp;nbsp;emp_cert&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;emp_certificate_empid&amp;nbsp;|&amp;nbsp;emp_certificate_empid&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.emp.id&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;index&amp;nbsp;|+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;简述一下执行计划，首先mysql根据idx_last_upd_date索引扫描cm_log表获得379条记录；然后查表扫描了63727条记录，分为两部分，derived表示构造表，也就是不存在的表，可以简单理解成是一个语句形成的结果集，后面的数字表示语句的ID。derived2表示的是ID = 2的查询构造了虚拟表，并且返回了63727条记录。我们再来看看ID = 2的语句究竟做了写什么返回了这么大量的数据，首先全表扫描employee表13317条记录，然后根据索引emp_certificate_empid关联emp_certificate表，rows = 1表示，每个关联都只锁定了一条记录，效率比较高。获得后，再和cm_log的379条记录根据规则关联。从执行过程上可以看出返回了太多的数据，返回的数据绝大部分cm_log都用不到，因为cm_log只锁定了379条记录。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如何优化呢？可以看到我们在运行完后还是要和cm_log做join,那么我们能不能之前和cm_log做join呢？仔细分析语句不难发现，其基本思想是如果cm_log的ref_table是EmpCertificate就关联emp_certificate表，如果ref_table是Employee就关联employee表，我们完全可以拆成两部分，并用union连接起来，注意这里用union，而不用union all是因为原语句有“distinct”来得到唯一的记录，而union恰好具备了这种功能。如果原语句中没有distinct不需要去重，我们就可以直接使用union all了，因为使用union需要去重的动作，会影响SQL性能。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;优化过的语句如下&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;emp.id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;on&amp;nbsp;cl.ref_table&amp;nbsp;=&amp;nbsp;&amp;#39;Employee&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid&amp;nbsp;=&amp;nbsp;emp.id&amp;nbsp;
where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;emp.is_deleted&amp;nbsp;=&amp;nbsp;0&amp;nbsp;unionselect
&amp;nbsp;emp.id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;emp_certificate&amp;nbsp;ec&amp;nbsp;
&amp;nbsp;on&amp;nbsp;cl.ref_table&amp;nbsp;=&amp;nbsp;&amp;#39;EmpCertificate&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid&amp;nbsp;=&amp;nbsp;ec.id&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;on&amp;nbsp;emp.id&amp;nbsp;=&amp;nbsp;ec.emp_id&amp;nbsp;
where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;emp.is_deleted&amp;nbsp;=&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.不需要了解业务场景，只需要改造的语句和改造之前的语句保持结果一致&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.现有索引可以满足，不需要建索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.用改造后的语句实验一下，只需要10ms 降低了近200倍！&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.cl.ref_oid&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;ec&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY,emp_certificate_empid&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.cl.ref_oid&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.ec.emp_id&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;RESULT&amp;nbsp;|&amp;nbsp;&amp;lt;union1,2&amp;gt;&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;|+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+53&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(0.01&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;明确应用场景&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;举这个例子的目的在于颠覆我们对列的区分度的认知，一般上我们认为区分度越高的列，越容易锁定更少的记录，但在一些特殊的情况下，这种理论是有局限性的&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;*&amp;nbsp;from
&amp;nbsp;stage_poi&amp;nbsp;sp&amp;nbsp;
where
&amp;nbsp;sp.accurate_result=1&amp;nbsp;
&amp;nbsp;and&amp;nbsp;(
&amp;nbsp;sp.sync_status=0&amp;nbsp;
&amp;nbsp;or&amp;nbsp;sp.sync_status=2&amp;nbsp;
&amp;nbsp;or&amp;nbsp;sp.sync_status=4
&amp;nbsp;);&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先看看运行多长时间,951条数据6.22秒，真的很慢&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;951&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(6.22&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.先explain，rows达到了361万，type = ALL表明是全表扫描&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;SIMPLE&amp;nbsp;|&amp;nbsp;sp&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;3613155&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;|+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.所有字段都应用查询返回记录数，因为是单表查询 0已经做过了951条&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3.让explain的rows 尽量逼近951&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;看一下accurate_result = 1的记录数&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select&amp;nbsp;count(*),accurate_result&amp;nbsp;from&amp;nbsp;stage_poi&amp;nbsp;group&amp;nbsp;by&amp;nbsp;accurate_result;+----------+-----------------+|&amp;nbsp;count(*)&amp;nbsp;|&amp;nbsp;accurate_result&amp;nbsp;|+----------+-----------------+|&amp;nbsp;1023&amp;nbsp;|&amp;nbsp;-1&amp;nbsp;||&amp;nbsp;2114655&amp;nbsp;|&amp;nbsp;0&amp;nbsp;||&amp;nbsp;972815&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|+----------+-----------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们看到accurate_result这个字段的区分度非常低，整个表只有-1,0,1三个值，加上索引也无法锁定特别少量的数据&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;再看一下sync_status字段的情况&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select&amp;nbsp;count(*),sync_status&amp;nbsp;from&amp;nbsp;stage_poi&amp;nbsp;group&amp;nbsp;by&amp;nbsp;sync_status;+----------+-------------+|&amp;nbsp;count(*)&amp;nbsp;|&amp;nbsp;sync_status&amp;nbsp;|+----------+-------------+|&amp;nbsp;3080&amp;nbsp;|&amp;nbsp;0&amp;nbsp;||&amp;nbsp;3085413&amp;nbsp;|&amp;nbsp;3&amp;nbsp;|+----------+-------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;同样的区分度也很低，根据理论，也不适合建立索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;问题分析到这，好像得出了这个表无法优化的结论，两个列的区分度都很低，即便加上索引也只能适应这种情况，很难做普遍性的优化，比如当sync_status 0、3分布的很平均，那么锁定记录也是百万级别的&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.找业务方去沟通，看看使用场景。业务方是这么来使用这个SQL语句的，每隔五分钟会扫描符合条件的数据，处理完成后把sync_status这个字段变成1,五分钟符合条件的记录数并不会太多，1000个左右。了解了业务方的使用场景后，优化这个SQL就变得简单了，因为业务方保证了数据的不平衡，如果加上索引可以过滤掉绝大部分不需要的数据&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.根据建立索引规则，使用如下语句建立索引&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;alter&amp;nbsp;table&amp;nbsp;stage_poi&amp;nbsp;add&amp;nbsp;index&amp;nbsp;idx_acc_status(accurate_result,sync_status);&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.观察预期结果,发现只需要200ms，快了30多倍。&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;952&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(0.20&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们再来回顾一下分析问题的过程，单表查询相对来说比较好优化，大部分时候只需要把where条件里面的字段依照规则加上索引就好，如果只是这种“无脑”优化的话，显然一些区分度非常低的列，不应该加索引的列也会被加上索引，这样会对插入、更新性能造成严重的影响，同时也有可能影响其它的查询语句。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;所以我们第4步调差SQL的使用场景非常关键，我们只有知道这个业务场景，才能更好地辅助我们更好的分析和优化查询语句。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询的案例就分析到这儿，以上只是一些比较典型的案例。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们在优化过程中遇到过超过1000行，涉及到16个表join的“垃圾SQL”，也遇到过线上线下数据库差异导致应用直接被慢查询拖死，也遇到过varchar等值比较没有写单引号，还遇到过笛卡尔积查询直接把从库搞死。再多的案例其实也只是一些经验的积累，如果我们熟悉查询优化器、索引的内部原理，那么分析这些案例就变得特别简单了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' WHERE `aid` = 41 [ RunTime:0.0050s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0011s ]
SQL: DELETE FROM `lxp_article_tag` WHERE `aid` = 41 [ RunTime:0.0031s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('41','26') [ RunTime:0.0028s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0010s ]
SQL: DELETE FROM `lxp_article_pic` WHERE `aid` = 41 [ RunTime:0.0035s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('41','/Upload/image/ueditor/mysql.jpg') [ RunTime:0.0032s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000029s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000058s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.003948s ]
INFO: [ view_parse ] --END-- [ RunTime:0.003976s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000093s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000112s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000389s ]
INFO: [ app_end ] --END-- [ RunTime:0.000414s ]

[ 2019-01-05T17:44:38+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/41
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000238s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000303s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000329s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0012s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 41 LIMIT 1   [ RunTime:0.0005s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0010s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 41  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0009s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000079s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000111s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005529s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005554s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000111s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000143s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000400s ]
INFO: [ app_end ] --END-- [ RunTime:0.000428s ]

[ 2019-01-05T17:51:05+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/41
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000013s ]
INFO: [ app_init ] --END-- [ RunTime:0.000320s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000462s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000500s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0013s ]
SQL: UPDATE `lxp_article` SET `aid`='41',`cid`='34',`title`='MySQL数据库的索引原理、与慢SQL优化的5大原则',`author`='鹿晓鹏',`keywords`='MySQL',`description`='MySQLMySQL数据库的索引原理、与慢SQL优化的5大原则',`is_original`='1',`is_top`='0',`is_show`='1',`content`='&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL凭借着出色的性能、低廉的成本、丰富的资源，已经成为绝大多数互联网公司的首选关系型数据库。虽然性能出色，但所谓“好马配好鞍”，如何能够更好的使用它，已经成为开发工程师的必修课，我们经常会从职位描述上看到诸如“精通MySQL”、“SQL语句优化”、“了解数据库原理”等要求。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们知道一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;本文旨在以开发工程师的角度来解释数据库索引的原理和如何优化慢查询。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;MySQL索引原理&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.索引目的&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？&lt;/span&gt;&lt;/p&gt;&lt;h1 style=&quot;margin: 5px 0px; line-height: 35px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; white-space: normal; font-size: 24px; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.索引原理&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&amp;gt;、&amp;lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是lgN，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的，数据库实现比较复杂，数据保存在磁盘上，而为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.磁盘IO与预读&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;前面提到了访问磁盘，那么这里先简单介绍一下磁盘IO和预读，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分，寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms；传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错的，但要知道一台500 -MIPS的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行40万条指令，数据库动辄十万百万乃至千万级数据，每次9毫秒的时间，显然是个灾难。下图是计算机硬件延迟的对比图，供大家参考：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p9.pstatp.com/large/pgc-image/153933367186953a1c67f18&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.索引的数据结构&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;前面讲了生活中索引的例子，索引的基本原理，数据库的复杂性，又讲了操作系统的相关知识，目的就是让大家了解，任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;5.详解b+树&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p98.pstatp.com/large/pgc-image/1539333671879b9b9b10ac3&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;6.b+树的查找过程&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;7.b+树性质&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询优化&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;关于MySQL索引原理是比较枯燥的东西，大家只需要有一个感性的认识，并不需要理解得非常透彻和深入。我们回头来看看一开始我们说的慢查询，了解完索引原理之后，大家是不是有什么想法呢？先总结一下索引的几大基本原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;建索引的几大原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.最左前缀匹配原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&amp;gt;、&amp;lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &amp;gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.=和in可以乱序&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.尽量选择区分度高的列作为索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.索引列不能参与计算，保持列“干净”&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;5.尽量的扩展索引，不要新建索引。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;查询优化神器 – explain命令&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;关于explain命令相信大家并不陌生，具体用法和字段含义可以参考官网explain-output，这里需要强调rows是核心指标，绝大部分rows小的语句执行一定很快（有例外，下面会讲到）。所以优化语句基本上都是在优化rows。&lt;/span&gt;&lt;/p&gt;&lt;h1 style=&quot;margin: 5px 0px; line-height: 35px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; white-space: normal; font-size: 24px; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询优化基本步骤&lt;/span&gt;&lt;br/&gt;&lt;/h1&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先运行看看是否真的很慢，注意设置SQL_NO_CACHE&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询）&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3.order by limit 形式的sql语句让排序的表优先查&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.了解业务方使用场景&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.加索引时参照建索引的几大原则&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.观察结果，不符合预期继续从0分析&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 18px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询案例&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;下面几个例子详细解释了如何分析和优化慢查询&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;复杂语句写法&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;很多情况下，我们写SQL只是为了实现功能，这只是第一步，不同的语句书写方式对于效率往往有本质的差别，这要求我们对mysql的执行计划和索引原则有非常清楚的认识，请看下面的语句&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;distinct&amp;nbsp;cert.emp_id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join&amp;nbsp;(
&amp;nbsp;select
&amp;nbsp;emp.id&amp;nbsp;as&amp;nbsp;emp_id,
&amp;nbsp;emp_cert.id&amp;nbsp;as&amp;nbsp;cert_id&amp;nbsp;
&amp;nbsp;from
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;left&amp;nbsp;join
&amp;nbsp;emp_certificate&amp;nbsp;emp_cert&amp;nbsp;
&amp;nbsp;on&amp;nbsp;emp.id&amp;nbsp;=&amp;nbsp;emp_cert.emp_id&amp;nbsp;
&amp;nbsp;where
&amp;nbsp;emp.is_deleted=0
&amp;nbsp;)&amp;nbsp;cert&amp;nbsp;
&amp;nbsp;on&amp;nbsp;(
&amp;nbsp;cl.ref_table=&amp;#39;Employee&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid=&amp;nbsp;cert.emp_id&amp;nbsp;)&amp;nbsp;
&amp;nbsp;or&amp;nbsp;(
&amp;nbsp;cl.ref_table=&amp;#39;EmpCertificate&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid=&amp;nbsp;cert.cert_id&amp;nbsp;)&amp;nbsp;where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;;&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先运行一下，53条记录 1.87秒，又没有用聚合语句，比较慢&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;53&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(1.87&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.explain&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where;&amp;nbsp;Using&amp;nbsp;temporary&amp;nbsp;||&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;&amp;lt;derived2&amp;gt;&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;63727&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where;&amp;nbsp;Using&amp;nbsp;join&amp;nbsp;buffer&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;DERIVED&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;13317&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;DERIVED&amp;nbsp;|&amp;nbsp;emp_cert&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;emp_certificate_empid&amp;nbsp;|&amp;nbsp;emp_certificate_empid&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.emp.id&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;index&amp;nbsp;|+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;简述一下执行计划，首先mysql根据idx_last_upd_date索引扫描cm_log表获得379条记录；然后查表扫描了63727条记录，分为两部分，derived表示构造表，也就是不存在的表，可以简单理解成是一个语句形成的结果集，后面的数字表示语句的ID。derived2表示的是ID = 2的查询构造了虚拟表，并且返回了63727条记录。我们再来看看ID = 2的语句究竟做了写什么返回了这么大量的数据，首先全表扫描employee表13317条记录，然后根据索引emp_certificate_empid关联emp_certificate表，rows = 1表示，每个关联都只锁定了一条记录，效率比较高。获得后，再和cm_log的379条记录根据规则关联。从执行过程上可以看出返回了太多的数据，返回的数据绝大部分cm_log都用不到，因为cm_log只锁定了379条记录。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;如何优化呢？可以看到我们在运行完后还是要和cm_log做join,那么我们能不能之前和cm_log做join呢？仔细分析语句不难发现，其基本思想是如果cm_log的ref_table是EmpCertificate就关联emp_certificate表，如果ref_table是Employee就关联employee表，我们完全可以拆成两部分，并用union连接起来，注意这里用union，而不用union all是因为原语句有“distinct”来得到唯一的记录，而union恰好具备了这种功能。如果原语句中没有distinct不需要去重，我们就可以直接使用union all了，因为使用union需要去重的动作，会影响SQL性能。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;优化过的语句如下&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;emp.id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;on&amp;nbsp;cl.ref_table&amp;nbsp;=&amp;nbsp;&amp;#39;Employee&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid&amp;nbsp;=&amp;nbsp;emp.id&amp;nbsp;
where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;emp.is_deleted&amp;nbsp;=&amp;nbsp;0&amp;nbsp;unionselect
&amp;nbsp;emp.id&amp;nbsp;
from
&amp;nbsp;cm_log&amp;nbsp;cl&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;emp_certificate&amp;nbsp;ec&amp;nbsp;
&amp;nbsp;on&amp;nbsp;cl.ref_table&amp;nbsp;=&amp;nbsp;&amp;#39;EmpCertificate&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.ref_oid&amp;nbsp;=&amp;nbsp;ec.id&amp;nbsp;
inner&amp;nbsp;join
&amp;nbsp;employee&amp;nbsp;emp&amp;nbsp;
&amp;nbsp;on&amp;nbsp;emp.id&amp;nbsp;=&amp;nbsp;ec.emp_id&amp;nbsp;
where
&amp;nbsp;cl.last_upd_date&amp;nbsp;&amp;gt;=&amp;#39;2013-11-07&amp;nbsp;15:03:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;cl.last_upd_date&amp;lt;=&amp;#39;2013-11-08&amp;nbsp;16:00:00&amp;#39;&amp;nbsp;
&amp;nbsp;and&amp;nbsp;emp.is_deleted&amp;nbsp;=&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.不需要了解业务场景，只需要改造的语句和改造之前的语句保持结果一致&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.现有索引可以满足，不需要建索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.用改造后的语句实验一下，只需要10ms 降低了近200倍！&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;1&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.cl.ref_oid&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;cl&amp;nbsp;|&amp;nbsp;range&amp;nbsp;|&amp;nbsp;cm_log_cls_id,idx_last_upd_date&amp;nbsp;|&amp;nbsp;idx_last_upd_date&amp;nbsp;|&amp;nbsp;8&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;379&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;ec&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY,emp_certificate_empid&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.cl.ref_oid&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;||&amp;nbsp;2&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;|&amp;nbsp;emp&amp;nbsp;|&amp;nbsp;eq_ref&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;PRIMARY&amp;nbsp;|&amp;nbsp;4&amp;nbsp;|&amp;nbsp;meituanorg.ec.emp_id&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;||&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;UNION&amp;nbsp;RESULT&amp;nbsp;|&amp;nbsp;&amp;lt;union1,2&amp;gt;&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;|+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+53&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(0.01&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;明确应用场景&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;举这个例子的目的在于颠覆我们对列的区分度的认知，一般上我们认为区分度越高的列，越容易锁定更少的记录，但在一些特殊的情况下，这种理论是有局限性的&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select
&amp;nbsp;*&amp;nbsp;from
&amp;nbsp;stage_poi&amp;nbsp;sp&amp;nbsp;
where
&amp;nbsp;sp.accurate_result=1&amp;nbsp;
&amp;nbsp;and&amp;nbsp;(
&amp;nbsp;sp.sync_status=0&amp;nbsp;
&amp;nbsp;or&amp;nbsp;sp.sync_status=2&amp;nbsp;
&amp;nbsp;or&amp;nbsp;sp.sync_status=4
&amp;nbsp;);&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;0.先看看运行多长时间,951条数据6.22秒，真的很慢&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;951&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(6.22&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.先explain，rows达到了361万，type = ALL表明是全表扫描&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+|&amp;nbsp;id&amp;nbsp;|&amp;nbsp;select_type&amp;nbsp;|&amp;nbsp;table&amp;nbsp;|&amp;nbsp;type&amp;nbsp;|&amp;nbsp;possible_keys&amp;nbsp;|&amp;nbsp;key&amp;nbsp;|&amp;nbsp;key_len&amp;nbsp;|&amp;nbsp;ref&amp;nbsp;|&amp;nbsp;rows&amp;nbsp;|&amp;nbsp;Extra&amp;nbsp;|+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+|&amp;nbsp;1&amp;nbsp;|&amp;nbsp;SIMPLE&amp;nbsp;|&amp;nbsp;sp&amp;nbsp;|&amp;nbsp;ALL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;NULL&amp;nbsp;|&amp;nbsp;3613155&amp;nbsp;|&amp;nbsp;Using&amp;nbsp;where&amp;nbsp;|+----+-------------+-------+------+---------------+------+---------+------+---------+-------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.所有字段都应用查询返回记录数，因为是单表查询 0已经做过了951条&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3.让explain的rows 尽量逼近951&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;看一下accurate_result = 1的记录数&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select&amp;nbsp;count(*),accurate_result&amp;nbsp;from&amp;nbsp;stage_poi&amp;nbsp;group&amp;nbsp;by&amp;nbsp;accurate_result;+----------+-----------------+|&amp;nbsp;count(*)&amp;nbsp;|&amp;nbsp;accurate_result&amp;nbsp;|+----------+-----------------+|&amp;nbsp;1023&amp;nbsp;|&amp;nbsp;-1&amp;nbsp;||&amp;nbsp;2114655&amp;nbsp;|&amp;nbsp;0&amp;nbsp;||&amp;nbsp;972815&amp;nbsp;|&amp;nbsp;1&amp;nbsp;|+----------+-----------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们看到accurate_result这个字段的区分度非常低，整个表只有-1,0,1三个值，加上索引也无法锁定特别少量的数据&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;再看一下sync_status字段的情况&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;select&amp;nbsp;count(*),sync_status&amp;nbsp;from&amp;nbsp;stage_poi&amp;nbsp;group&amp;nbsp;by&amp;nbsp;sync_status;+----------+-------------+|&amp;nbsp;count(*)&amp;nbsp;|&amp;nbsp;sync_status&amp;nbsp;|+----------+-------------+|&amp;nbsp;3080&amp;nbsp;|&amp;nbsp;0&amp;nbsp;||&amp;nbsp;3085413&amp;nbsp;|&amp;nbsp;3&amp;nbsp;|+----------+-------------+&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;同样的区分度也很低，根据理论，也不适合建立索引&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;问题分析到这，好像得出了这个表无法优化的结论，两个列的区分度都很低，即便加上索引也只能适应这种情况，很难做普遍性的优化，比如当sync_status 0、3分布的很平均，那么锁定记录也是百万级别的&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.找业务方去沟通，看看使用场景。业务方是这么来使用这个SQL语句的，每隔五分钟会扫描符合条件的数据，处理完成后把sync_status这个字段变成1,五分钟符合条件的记录数并不会太多，1000个左右。了解了业务方的使用场景后，优化这个SQL就变得简单了，因为业务方保证了数据的不平衡，如果加上索引可以过滤掉绝大部分不需要的数据&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;5.根据建立索引规则，使用如下语句建立索引&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;alter&amp;nbsp;table&amp;nbsp;stage_poi&amp;nbsp;add&amp;nbsp;index&amp;nbsp;idx_acc_status(accurate_result,sync_status);&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;6.观察预期结果,发现只需要200ms，快了30多倍。&lt;/span&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot; style=&quot;padding: 8px; color: rgb(68, 68, 68); border-radius: 2px; margin-top: 0px; margin-bottom: 20px; font-size: 14px; line-height: 20px; word-break: break-all; overflow-wrap: break-word; white-space: pre-wrap; border: 1px solid rgb(238, 238, 238); overflow: hidden; font-family: Consolas, &amp;quot;Bitstream Vera Sans Mono&amp;quot;, &amp;quot;Courier New&amp;quot;, Courier, monospace !important;&quot;&gt;952&amp;nbsp;rows&amp;nbsp;in&amp;nbsp;set&amp;nbsp;(0.20&amp;nbsp;sec)&lt;/pre&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们再来回顾一下分析问题的过程，单表查询相对来说比较好优化，大部分时候只需要把where条件里面的字段依照规则加上索引就好，如果只是这种“无脑”优化的话，显然一些区分度非常低的列，不应该加索引的列也会被加上索引，这样会对插入、更新性能造成严重的影响，同时也有可能影响其它的查询语句。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;所以我们第4步调差SQL的使用场景非常关键，我们只有知道这个业务场景，才能更好地辅助我们更好的分析和优化查询语句。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;慢查询的案例就分析到这儿，以上只是一些比较典型的案例。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们在优化过程中遇到过超过1000行，涉及到16个表join的“垃圾SQL”，也遇到过线上线下数据库差异导致应用直接被慢查询拖死，也遇到过varchar等值比较没有写单引号，还遇到过笛卡尔积查询直接把从库搞死。再多的案例其实也只是一些经验的积累，如果我们熟悉查询优化器、索引的内部原理，那么分析这些案例就变得特别简单了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' WHERE `aid` = 41 [ RunTime:0.0078s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: DELETE FROM `lxp_article_tag` WHERE `aid` = 41 [ RunTime:0.0028s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('41','26') [ RunTime:0.0026s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0010s ]
SQL: DELETE FROM `lxp_article_pic` WHERE `aid` = 41 [ RunTime:0.0026s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('41','/Upload/image/ueditor/mysql.jpg') [ RunTime:0.0045s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000031s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000080s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004261s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004287s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000093s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000112s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000384s ]
INFO: [ app_end ] --END-- [ RunTime:0.000413s ]

[ 2019-01-05T17:51:06+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000281s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000340s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000367s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0014s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0007s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0007s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000115s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005650s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005691s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000121s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000140s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000422s ]
INFO: [ app_end ] --END-- [ RunTime:0.000448s ]

[ 2019-01-05T17:51:07+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/41
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000271s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000415s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000442s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0011s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 41 LIMIT 1   [ RunTime:0.0005s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 41  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000087s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005270s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005294s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000157s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000179s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000345s ]
INFO: [ app_end ] --END-- [ RunTime:0.000372s ]

[ 2019-01-05T17:51:09+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000259s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000300s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000326s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0017s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0009s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0008s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0007s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000073s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000130s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.006707s ]
INFO: [ view_parse ] --END-- [ RunTime:0.006739s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000172s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000198s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000463s ]
INFO: [ app_end ] --END-- [ RunTime:0.000493s ]

[ 2019-01-05T17:51:11+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000279s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000326s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000352s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000055s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000081s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004577s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004602s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000097s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000116s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000448s ]
INFO: [ app_end ] --END-- [ RunTime:0.000477s ]

[ 2019-01-05T17:51:50+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000241s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000292s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000317s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0047s ]
SQL: INSERT INTO `lxp_article` (`cid`,`title`,`author`,`keywords`,`description`,`is_original`,`is_top`,`is_show`,`content`,`click`,`is_delete`,`addtime`) VALUES ('35','Mysql数据库分库分表、读写分离的原理实现，使用场景','鹿晓鹏','mysql,分库分表','数据库分库分表、读写分离的原理实现，使用场景','1','0','1','&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;为什么要分库分表和读写分离？&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;类似淘宝网这样的网站，海量数据的存储和访问成为了系统设计的瓶颈问题，日益增长的业务数据，无疑对数据库造成了相当大的负载，同时对于系统的稳定性和扩展性提出很高的要求。随着时间和业务的发展，数据库中的表会越来越多，表中的数据量也会越来越大，相应地，数据操作的开销也会越来越大；另外，无论怎样升级硬件资源，单台服务器的资源（CPU、磁盘、内存、网络IO、事务数、连接数）总是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。分表、分库和读写分离可以有效地减小单台数据库的压力。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分库分表的原理和实现&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.什么是分区、分表、分库&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分区&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;就是把一张表的数据分成N个区块，在逻辑上看最终只是一张表，但底层是由&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;N个物理区块组成的，&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分区实现比较简单，数据库mysql、oracle等很容易就可支持。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;就是把一张表按一定的规则分解成N个具有独立存储空间的实体表。系统读写时需要根据定义好的规则得到对应的字表明，然后操作它。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分库&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;一旦分表，一个库中的表会越来越多&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;margin: 15px auto; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 233, 198); border-image: initial; padding: 5px 15px 10px; background: rgb(244, 245, 246); white-space: normal; color: rgb(153, 153, 153); font-family: &amp;quot;&amp;quot;;&quot;&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;将整个数据库比作图书馆，一张表就是一本书。当要在一本书中查找某项内容时，如果不&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分章节&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;，查找的效率将会下降。而同理，在数据库中就是&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分区&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.什么时候考虑使用分区？&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;一张表的查询速度已经慢到影响使用的时候。&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;sql经过优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据量大&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;表中的数据是分段的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;对数据的操作往往只涉及一部分数据，而不是所有的数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分区解决的问题&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;主要可以提升查询效率&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分区的实现方式（简单），例如：&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;margin: 15px auto; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 233, 198); border-image: initial; padding: 5px 15px 10px; background: rgb(244, 245, 246); white-space: normal; color: rgb(153, 153, 153); font-family: &amp;quot;&amp;quot;;&quot;&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;mysql5 开始支持分区功能&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;CREATE TABLE sales (&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;id INT AUTO_INCREMENT,&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;amount DOUBLE NOT NULL,&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;order_day DATETIME NOT NULL,&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PRIMARY KEY(id, order_day)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;) ENGINE=Innodb&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION BY RANGE(YEAR(order_day)) (&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION p_2010 VALUES LESS THAN (2010),&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION p_2011 VALUES LESS THAN (2011),&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION p_2012 VALUES LESS THAN (2012),&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION p_catchall VALUES LESS THAN MAXVALUE);&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.什么时候考虑分表？&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;一张表的查询速度已经慢到影响使用的时候。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;sql经过优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据量大&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;当频繁插入或者联合查询时，速度变慢&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.分表解决的问题&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分表后，单表的并发能力提高了，磁盘I/O性能也提高了，写操作效率提高了&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;查询一次的时间短了&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据分布在不同的文件，磁盘I/O性能提高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;读写锁影响的数据量变小&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;插入数据库需要重新建立索引的数据减少&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;5.分表的实现方式（复杂）&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;需要业务系统配合迁移升级，工作量较大。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;6.常见分表、分库常用策略：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.平均进行分配hash(object)%N(适用于简单架构)。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.按照权重进行分配且均匀轮询。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3.按照业务进行分配。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.按照一致性hash算法进行分配(适用于集群架构，在集群中节点的添加和删除不会造成数据丢失，方便数据迁移)。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;7.分库分表中间件&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分表又分为单库分表（表名不同）和多库分表（表名相同），不管使用哪种策略都还需要自己去实现路由，制定路由规则等&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;，&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;可以考虑使用开源的分库分表中间件，无侵入应用设计，例如淘宝的tddl等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p99.pstatp.com/large/pgc-image/1535169594537eadd210ee8&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;读写分离的原理和实现&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1、什么是读写分离&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;读写分离，基本的原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2、为什么要读写分离呢？&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;因为数据库的“写”（写10000条数据到oracle可能要3分钟）操作是比较耗时的。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;但是数据库的“读”（从oracle读10000条数据可能只要5秒钟）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;所以读写分离，解决的是，数据库的写入，影响了查询的效率。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3、什么时候要读写分离？&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据库不一定要读写分离，如果程序使用数据库较多时，而更新少，查询多的情况下会考虑使用，利用数据库 主从同步 。可以减少数据库压力，提高性能。当然，数据库也有&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;其它&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;优化方案。memcache 或是 表折分，或是搜索引擎。都是解决方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p99.pstatp.com/large/pgc-image/1535169900405d0708cbd6e&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.主从复制、读写分离的基本设计&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;在实际的生产环境中，对数据库的读和写都在同一个数据库服务器中，是不能满足实际需求的。无论是在安全性、高可用性还是高并发等各个方面都是完全不能满足实际需求的。因此，通过主从复制的方式来同步数据，再通过读写分离来提升数据库的并发负载能力。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;一台主、多台从，主提供写操作，从提供读操作。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;读写分离的实现：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们只需要实现读写分离，主从复制数据一般由数据库级来实现同步，当然也可以自己去实现同步，只是需要考虑的点比较多。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分库分表、读写分离总结：&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.分区&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;对业务透明，分区只不过把存放数据的文件分成了许多小块，根据一定的规则把数据文件(MYD)和索引文件（MYI）进行了分割，分区后的表呢，还是一张表。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.分表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;当数据量大到一定程度的时候，都会导致处理性能的不足，这个时候就没有办法了，只能进行分表处理。也就是把数据库当中数据根据按照分库原则分到多个数据表当中，这样，就可以把大表变成多个小表，不同的分表中数据不重复，从而提高处理效率。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.分库&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分表和分区都是基于同一个数据库里的数据分离技巧，对数据库性能有一定提升，但是随着业务数据量的增加，原来所有的数据都是在一个数据库上的，网络IO及文件IO都集中在一个数据库上的，因此CPU、内存、文件IO、网络IO都可能会成为系统瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;当业务系统的数据容量接近或超过单台服务器的容量、QPS/TPS接近或超过单个数据库实例的处理极限等此时，往往是采用垂直和水平结合的数据拆分方法，把数据服务和数据存储分布到多台数据库服务器上。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.读写分离方案&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;当数据库读远大于写，查询多的情况，就可以考虑主数据负责写操作，从数据库负责读操作，一主多重，从而把数据读写分离，最后还可以结合redis等缓存来配合分担数据的读操作，大大的降低后端数据库的压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;','0','0','1546681910') [ RunTime:0.0102s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('42','26') [ RunTime:0.0020s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0009s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('42','/Upload/image/ueditor/redis.jpg') [ RunTime:0.0033s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SELECT `aid`,`addtime` FROM `lxp_article` WHERE `is_show` = 1 AND `is_delete` = 0 ORDER BY aid desc  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000030s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000067s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004176s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004207s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000132s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000152s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000427s ]
INFO: [ app_end ] --END-- [ RunTime:0.000450s ]

[ 2019-01-05T17:51:51+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000289s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000313s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000340s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0010s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0114s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 42 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 41 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0004s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000044s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000074s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005137s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005161s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000100s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000120s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000335s ]
INFO: [ app_end ] --END-- [ RunTime:0.000395s ]

[ 2019-01-05T17:52:59+08:00 ] 223.72.56.102 /Admin/Index/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000247s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000336s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000366s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000080s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000114s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004902s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004928s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000103s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000122s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000347s ]
INFO: [ app_end ] --END-- [ RunTime:0.000372s ]

[ 2019-01-05T17:53:00+08:00 ] 223.72.56.102 /Admin/Index/welcome
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000256s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000296s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000321s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0030s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_chat` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_comment` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_comment` LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000047s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000100s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.003801s ]
INFO: [ view_parse ] --END-- [ RunTime:0.003825s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000091s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000109s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000413s ]
INFO: [ app_end ] --END-- [ RunTime:0.000436s ]

[ 2019-01-05T17:53:05+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000274s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000279s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000304s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0010s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0120s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0009s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0006s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 41 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 42 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000045s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000073s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005277s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005303s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000137s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000157s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000319s ]
INFO: [ app_end ] --END-- [ RunTime:0.000345s ]

[ 2019-01-05T17:53:31+08:00 ] 223.72.56.102 /Admin/Index/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000262s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000338s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000364s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000078s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000110s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004743s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004769s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000101s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000120s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000317s ]
INFO: [ app_end ] --END-- [ RunTime:0.000339s ]

[ 2019-01-05T17:53:32+08:00 ] 223.72.56.102 /Admin/Index/welcome
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000014s ]
INFO: [ app_init ] --END-- [ RunTime:0.000362s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000434s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000472s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0014s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_chat` [ RunTime:0.0008s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_comment` [ RunTime:0.0007s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_comment` LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000103s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004361s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004389s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000119s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000138s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000441s ]
INFO: [ app_end ] --END-- [ RunTime:0.000464s ]

[ 2019-01-05T17:53:35+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000014s ]
INFO: [ app_init ] --END-- [ RunTime:0.000344s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000523s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000573s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0010s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0088s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0010s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0009s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 41 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0010s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 42 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0004s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0006s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000158s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.008328s ]
INFO: [ view_parse ] --END-- [ RunTime:0.008381s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000244s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000274s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000648s ]
INFO: [ app_end ] --END-- [ RunTime:0.000693s ]

[ 2019-01-05T17:54:05+08:00 ] 223.72.56.102 /Admin/Index/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000231s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000284s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000311s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000077s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000101s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004705s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004728s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000095s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000114s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000397s ]
INFO: [ app_end ] --END-- [ RunTime:0.000419s ]

[ 2019-01-05T17:54:06+08:00 ] 223.72.56.102 /Admin/Index/welcome
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000310s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000283s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000308s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0015s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_chat` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_comment` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_comment` LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000045s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000070s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.003839s ]
INFO: [ view_parse ] --END-- [ RunTime:0.003866s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000096s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000119s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000390s ]
INFO: [ app_end ] --END-- [ RunTime:0.000418s ]

[ 2019-01-05T17:54:08+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000235s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000353s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000384s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0011s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0180s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0010s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0012s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0005s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0007s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 41 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 42 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000047s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000086s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005885s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005914s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000142s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000169s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000349s ]
INFO: [ app_end ] --END-- [ RunTime:0.000378s ]

[ 2019-01-05T17:54:29+08:00 ] 223.72.56.102 /Admin/Index/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000280s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000309s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000335s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000090s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000177s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005653s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005681s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000114s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000134s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000361s ]
INFO: [ app_end ] --END-- [ RunTime:0.000384s ]

[ 2019-01-05T17:54:30+08:00 ] 223.72.56.102 /Admin/Index/welcome
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000013s ]
INFO: [ app_init ] --END-- [ RunTime:0.000294s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000406s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000438s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0019s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_chat` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_comment` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_comment` LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000098s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004215s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004245s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000096s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000115s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000522s ]
INFO: [ app_end ] --END-- [ RunTime:0.000546s ]

[ 2019-01-05T17:54:32+08:00 ] 223.72.56.102 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000256s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000303s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000330s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0016s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000124s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000159s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004713s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004737s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000092s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000111s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000400s ]
INFO: [ app_end ] --END-- [ RunTime:0.000422s ]

[ 2019-01-05T17:54:34+08:00 ] 223.72.56.102 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000272s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000332s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000359s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0014s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0072s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0005s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 41 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 42 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '31'  [ RunTime:0.0003s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 31 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '30'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 30 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '27'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 27 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '26'  [ RunTime:0.0006s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 26 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 30  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000047s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000086s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005461s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005489s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000135s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000155s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000335s ]
INFO: [ app_end ] --END-- [ RunTime:0.000362s ]

[ 2019-01-05T17:54:47+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000239s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000362s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000388s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0031s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 42 LIMIT 1   [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 42  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0006s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0006s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000100s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005307s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005332s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000098s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000118s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000373s ]
INFO: [ app_end ] --END-- [ RunTime:0.000401s ]

[ 2019-01-05T17:55:05+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000282s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000278s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000333s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0010s ]
SQL: UPDATE `lxp_article` SET `aid`='42',`cid`='34',`title`='Mysql数据库分库分表、读写分离的原理实现，使用场景',`author`='鹿晓鹏',`keywords`='mysql,分库分表',`description`='数据库分库分表、读写分离的原理实现，使用场景',`is_original`='1',`is_top`='0',`is_show`='1',`content`='&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;为什么要分库分表和读写分离？&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;类似淘宝网这样的网站，海量数据的存储和访问成为了系统设计的瓶颈问题，日益增长的业务数据，无疑对数据库造成了相当大的负载，同时对于系统的稳定性和扩展性提出很高的要求。随着时间和业务的发展，数据库中的表会越来越多，表中的数据量也会越来越大，相应地，数据操作的开销也会越来越大；另外，无论怎样升级硬件资源，单台服务器的资源（CPU、磁盘、内存、网络IO、事务数、连接数）总是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。分表、分库和读写分离可以有效地减小单台数据库的压力。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分库分表的原理和实现&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.什么是分区、分表、分库&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分区&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;就是把一张表的数据分成N个区块，在逻辑上看最终只是一张表，但底层是由&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;N个物理区块组成的，&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分区实现比较简单，数据库mysql、oracle等很容易就可支持。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;就是把一张表按一定的规则分解成N个具有独立存储空间的实体表。系统读写时需要根据定义好的规则得到对应的字表明，然后操作它。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分库&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;一旦分表，一个库中的表会越来越多&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;margin: 15px auto; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 233, 198); border-image: initial; padding: 5px 15px 10px; background: rgb(244, 245, 246); white-space: normal; color: rgb(153, 153, 153); font-family: &amp;quot;&amp;quot;;&quot;&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;将整个数据库比作图书馆，一张表就是一本书。当要在一本书中查找某项内容时，如果不&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分章节&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;，查找的效率将会下降。而同理，在数据库中就是&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分区&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.什么时候考虑使用分区？&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;一张表的查询速度已经慢到影响使用的时候。&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;sql经过优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据量大&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;表中的数据是分段的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;对数据的操作往往只涉及一部分数据，而不是所有的数据&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分区解决的问题&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;主要可以提升查询效率&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;分区的实现方式（简单），例如：&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;margin: 15px auto; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 233, 198); border-image: initial; padding: 5px 15px 10px; background: rgb(244, 245, 246); white-space: normal; color: rgb(153, 153, 153); font-family: &amp;quot;&amp;quot;;&quot;&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;mysql5 开始支持分区功能&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;CREATE TABLE sales (&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;id INT AUTO_INCREMENT,&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;amount DOUBLE NOT NULL,&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;order_day DATETIME NOT NULL,&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PRIMARY KEY(id, order_day)&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;) ENGINE=Innodb&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION BY RANGE(YEAR(order_day)) (&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION p_2010 VALUES LESS THAN (2010),&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION p_2011 VALUES LESS THAN (2011),&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION p_2012 VALUES LESS THAN (2012),&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 6px; padding: 0px; font-size: 14px;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;PARTITION p_catchall VALUES LESS THAN MAXVALUE);&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.什么时候考虑分表？&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;一张表的查询速度已经慢到影响使用的时候。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;sql经过优化&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据量大&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;当频繁插入或者联合查询时，速度变慢&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.分表解决的问题&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分表后，单表的并发能力提高了，磁盘I/O性能也提高了，写操作效率提高了&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;list-style-type: none;&quot; class=&quot; list-paddingleft-2&quot;&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;查询一次的时间短了&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据分布在不同的文件，磁盘I/O性能提高&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;读写锁影响的数据量变小&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&amp;nbsp;&lt;span style=&quot;font-size: 16px;&quot;&gt;插入数据库需要重新建立索引的数据减少&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;5.分表的实现方式（复杂）&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;需要业务系统配合迁移升级，工作量较大。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;6.常见分表、分库常用策略：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;1.平均进行分配hash(object)%N(适用于简单架构)。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;2.按照权重进行分配且均匀轮询。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;3.按照业务进行分配。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;4.按照一致性hash算法进行分配(适用于集群架构，在集群中节点的添加和删除不会造成数据丢失，方便数据迁移)。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;7.分库分表中间件&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分表又分为单库分表（表名不同）和多库分表（表名相同），不管使用哪种策略都还需要自己去实现路由，制定路由规则等&lt;/span&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;，&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;可以考虑使用开源的分库分表中间件，无侵入应用设计，例如淘宝的tddl等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p99.pstatp.com/large/pgc-image/1535169594537eadd210ee8&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;读写分离的原理和实现&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1、什么是读写分离&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;读写分离，基本的原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2、为什么要读写分离呢？&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;因为数据库的“写”（写10000条数据到oracle可能要3分钟）操作是比较耗时的。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;但是数据库的“读”（从oracle读10000条数据可能只要5秒钟）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;所以读写分离，解决的是，数据库的写入，影响了查询的效率。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3、什么时候要读写分离？&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;数据库不一定要读写分离，如果程序使用数据库较多时，而更新少，查询多的情况下会考虑使用，利用数据库 主从同步 。可以减少数据库压力，提高性能。当然，数据库也有&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;其它&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;优化方案。memcache 或是 表折分，或是搜索引擎。都是解决方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://p99.pstatp.com/large/pgc-image/1535169900405d0708cbd6e&quot; alt=&quot;鹿晓鹏博客&quot; style=&quot;max-width: 100%; height: auto; vertical-align: middle; border: 0px; margin: 0px auto; display: block;&quot;/&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.主从复制、读写分离的基本设计&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;在实际的生产环境中，对数据库的读和写都在同一个数据库服务器中，是不能满足实际需求的。无论是在安全性、高可用性还是高并发等各个方面都是完全不能满足实际需求的。因此，通过主从复制的方式来同步数据，再通过读写分离来提升数据库的并发负载能力。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;一台主、多台从，主提供写操作，从提供读操作。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;读写分离的实现：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;我们只需要实现读写分离，主从复制数据一般由数据库级来实现同步，当然也可以自己去实现同步，只是需要考虑的点比较多。&lt;/span&gt;&lt;/p&gt;&lt;h2 style=&quot;margin: 20px -20px 20px -24px; line-height: 18px; color: rgb(34, 34, 34); text-rendering: optimizelegibility; font-size: 24px; padding: 10px 20px 9px 10px; border-left: 8px solid rgb(0, 166, 124); background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(0, 166, 124); white-space: normal; font-family: &amp;quot;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分库分表、读写分离总结：&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;1.分区&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;对业务透明，分区只不过把存放数据的文件分成了许多小块，根据一定的规则把数据文件(MYD)和索引文件（MYI）进行了分割，分区后的表呢，还是一张表。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;2.分表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;当数据量大到一定程度的时候，都会导致处理性能的不足，这个时候就没有办法了，只能进行分表处理。也就是把数据库当中数据根据按照分库原则分到多个数据表当中，这样，就可以把大表变成多个小表，不同的分表中数据不重复，从而提高处理效率。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;3.分库&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;分表和分区都是基于同一个数据库里的数据分离技巧，对数据库性能有一定提升，但是随着业务数据量的增加，原来所有的数据都是在一个数据库上的，网络IO及文件IO都集中在一个数据库上的，因此CPU、内存、文件IO、网络IO都可能会成为系统瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;当业务系统的数据容量接近或超过单台服务器的容量、QPS/TPS接近或超过单个数据库实例的处理极限等此时，往往是采用垂直和水平结合的数据拆分方法，把数据服务和数据存储分布到多台数据库服务器上。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-weight: 700; font-size: 16px;&quot;&gt;4.读写分离方案&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-top: 0px; margin-bottom: 15px; font-size: 15px; white-space: normal; color: rgb(34, 34, 34); font-family: &amp;quot;font-size:16px;background-color:#FFFFFF;&amp;quot;;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;当数据库读远大于写，查询多的情况，就可以考虑主数据负责写操作，从数据库负责读操作，一主多重，从而把数据读写分离，最后还可以结合redis等缓存来配合分担数据的读操作，大大的降低后端数据库的压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' WHERE `aid` = 42 [ RunTime:0.0038s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: DELETE FROM `lxp_article_tag` WHERE `aid` = 42 [ RunTime:0.0057s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('42','24') [ RunTime:0.0033s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('42','26') [ RunTime:0.0042s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0008s ]
SQL: DELETE FROM `lxp_article_pic` WHERE `aid` = 42 [ RunTime:0.0031s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('42','/Upload/image/ueditor/mysql.jpg') [ RunTime:0.0073s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000035s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000086s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005333s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005363s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000195s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000217s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000363s ]
INFO: [ app_end ] --END-- [ RunTime:0.000385s ]

[ 2019-01-05T17:55:09+08:00 ] 223.72.56.102 /Admin/Article/edit/aid/42
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000013s ]
INFO: [ app_init ] --END-- [ RunTime:0.000298s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000424s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000470s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0012s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 42 LIMIT 1   [ RunTime:0.0005s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0007s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 42  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0011s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0007s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0023s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0008s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000103s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.007325s ]
INFO: [ view_parse ] --END-- [ RunTime:0.007353s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000175s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000197s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000421s ]
INFO: [ app_end ] --END-- [ RunTime:0.000449s ]

