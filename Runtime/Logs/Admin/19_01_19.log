[ 2019-01-19T14:49:10+08:00 ] 223.72.51.0 /index.php/Admin/Index/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000209s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000271s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000298s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000103s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000136s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005077s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005103s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000089s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000131s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000403s ]
INFO: [ app_end ] --END-- [ RunTime:0.000424s ]

[ 2019-01-19T14:49:11+08:00 ] 223.72.51.0 /Admin/Index/welcome
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000210s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000265s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000291s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_chat` [ RunTime:0.0004s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_comment` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_comment` LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000043s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000068s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004085s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004109s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000087s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000134s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000353s ]
INFO: [ app_end ] --END-- [ RunTime:0.000374s ]

[ 2019-01-19T14:49:14+08:00 ] 223.72.51.0 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000235s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000278s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000304s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000080s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000112s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004877s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004901s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000086s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000123s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000385s ]
INFO: [ app_end ] --END-- [ RunTime:0.000408s ]

[ 2019-01-19T14:51:51+08:00 ] 223.72.51.0 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000233s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000257s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000283s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: INSERT INTO `lxp_article` (`cid`,`title`,`author`,`keywords`,`description`,`is_original`,`is_top`,`is_show`,`content`,`click`,`is_delete`,`addtime`) VALUES ('35','Redis数据结构','鹿晓鹏','','这篇文章主要介绍了Redis中5种数据结构的使用场景介绍,本文对Redis中的5种数据类型String、Hash、List、Set、Sorted Set做了讲解,需要的朋友可以参考下','1','1','1','&lt;p&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Source Han Sans SC&amp;quot;, &amp;quot;Noto Sans CJK SC&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-serif; font-size: 15px; background-color: rgb(255, 255, 255);&quot;&gt;这篇文章主要介绍了Redis中5种数据结构的使用场景介绍,本文对Redis中的5种数据类型String、Hash、List、Set、Sorted Set做了讲解,需要的朋友可以参考下&lt;/span&gt;&lt;/p&gt;&lt;h1 data-v-07ed0d83=&quot;&quot; style=&quot;font-size: 2.5rem;margin: 0.67em 0px;line-height: 1.5&quot;&gt;通俗易懂的Redis数据结构基础教程&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c6b32b5f679dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;758&quot; data-height=&quot;129&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c6b32b5f679dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis有5个基本数据结构，string、list、hash、set和zset。它们是日常开发中使用频率非常高应用最为广泛的数据结构，把这5个数据结构都吃透了，你就掌握了Redis应用知识的一半了。&lt;/p&gt;&lt;h2 data-id=&quot;heading-0&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/22/164c182f83ceb3b5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;130&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/22/164c182f83ceb3b5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先我们从string谈起。string表示的是一个可变的字节数组，我们初始化字符串的内容、可以拿到字符串的长度，可以获取string的子串，可以覆盖string的子串内容，可以追加子串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;572&quot; data-height=&quot;169&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;初始化字符串&lt;/span&gt;&amp;nbsp;需要提供「变量名称」和「变量的内容」&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;ireader&amp;nbsp;beijing.zhangyue.keji.gufen.youxian.gongsi&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取字符串的内容&lt;/span&gt;&amp;nbsp;提供「变量名称」&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;beijing.zhangyue.keji.gufen.youxian.gongsi&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取字符串的长度&lt;/span&gt;&amp;nbsp;提供「变量名称」&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;strlen&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;42&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取子串&lt;/span&gt;&amp;nbsp;提供「变量名称」以及开始和结束位置[start, end]&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;getrange&amp;nbsp;ireader&amp;nbsp;28&amp;nbsp;34&amp;nbsp;&amp;quot;youxian&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;覆盖子串&lt;/span&gt;&amp;nbsp;提供「变量名称」以及开始位置和目标子串&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setrange&amp;nbsp;ireader&amp;nbsp;28&amp;nbsp;wooxian&amp;nbsp;(integer)&amp;nbsp;42&amp;nbsp;&amp;nbsp;#&amp;nbsp;返回长度&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;beijing.zhangyue.keji.gufen.wooxian.gongsi&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;追加子串&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;append&amp;nbsp;ireader&amp;nbsp;.hao&amp;nbsp;(integer)&amp;nbsp;46&amp;nbsp;#&amp;nbsp;返回长度&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;beijing.zhangyue.keji.gufen.wooxian.gongsi.hao&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;遗憾的是字符串没有提供字串插入方法和子串删除方法。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数器&lt;/span&gt;&amp;nbsp;如果字符串的内容是一个整数，那么还可以将字符串当成计数器来使用。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;ireader&amp;nbsp;42&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;42&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;ireader&amp;nbsp;100&amp;nbsp;(integer)&amp;nbsp;142&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;142&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;decrby&amp;nbsp;ireader&amp;nbsp;100&amp;nbsp;(integer)&amp;nbsp;42&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;42&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;ireader&amp;nbsp;&amp;nbsp;#&amp;nbsp;等价于incrby&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;43&amp;nbsp;&amp;gt;&amp;nbsp;decr&amp;nbsp;ireader&amp;nbsp;&amp;nbsp;#&amp;nbsp;等价于decrby&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;42&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;计数器是有范围的，它不能超过Long.Max，不能低于Long.MIN&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;ireader&amp;nbsp;9223372036854775807&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;ireader&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;ireader&amp;nbsp;-9223372036854775808&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;decr&amp;nbsp;ireader&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和删除&lt;/span&gt;&amp;nbsp;字符串可以使用del指令进行主动删除，可以使用expire指令设置过期时间，到点会自动删除，这属于被动删除。可以使用ttl指令获取字符串的寿命。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;expire&amp;nbsp;ireader&amp;nbsp;60&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;1表示设置成功，0表示变量ireader不存在&amp;nbsp;&amp;gt;&amp;nbsp;ttl&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;50&amp;nbsp;&amp;nbsp;#&amp;nbsp;还有50秒的寿命，返回-2表示变量不存在，-1表示没有设置过期时间&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除成功返回1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;(nil)&amp;nbsp;&amp;nbsp;#&amp;nbsp;变量ireader没有了&amp;nbsp;复制代码&lt;/pre&gt;&lt;h2 data-id=&quot;heading-1&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/22/164c25d671d13466?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;133&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/22/164c25d671d13466?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis将列表数据结构命名为list而不是array，是因为列表的存储结构用的是链表而不是数组，而且链表还是双向链表。因为它是链表，所以随机定位性能较弱，首尾插入删除性能较优。如果list的列表长度很长，使用时我们一定要关注链表相关操作的时间复杂度。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;负下标&lt;/span&gt;&amp;nbsp;链表元素的位置使用自然数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;0,1,2,....n-1&lt;/code&gt;表示，还可以使用负数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-1,-2,...-n&lt;/code&gt;来表示，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-1&lt;/code&gt;表示「倒数第一」，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-2&lt;/code&gt;表示「倒数第二」，那么&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-n&lt;/code&gt;就表示第一个元素，对应的下标为&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;0&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;队列／堆栈&lt;/span&gt;&amp;nbsp;链表可以从表头和表尾追加和移除元素，结合使用rpush/rpop/lpush/lpop四条指令，可以将链表作为队列或堆栈使用，左向右向进行都可以&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;右进左出&amp;nbsp;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;#&amp;nbsp;左进右出&amp;nbsp;&amp;gt;&amp;nbsp;lpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;右进右出&amp;nbsp;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;ireader&amp;nbsp;&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;左进左出&amp;nbsp;&amp;gt;&amp;nbsp;lpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;...&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在日常应用中，列表常用来作为异步队列来使用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;长度&lt;/span&gt;&amp;nbsp;使用llen指令获取链表长度&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;随机读&lt;/span&gt;&amp;nbsp;可以使用lindex指令访问指定位置的元素，使用lrange指令来获取链表子元素列表，提供start和end下标参数&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;2&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;-1表示倒数第一&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用lrange获取全部元素时，需要提供end_index，如果没有负下标，就需要首先通过llen指令获取长度，才可以得出end_index的值，有了负下标，使用-1代替end_index就可以达到相同的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;修改元素&lt;/span&gt;&amp;nbsp;使用lset指令在指定位置修改元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lset&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;javascript&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;javascript&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;插入元素&lt;/span&gt;&amp;nbsp;使用linsert指令在列表的中间位置插入元素，有经验的程序员都知道在插入元素时，我们经常搞不清楚是在指定位置的前面插入还是后面插入，所以antirez在linsert指令里增加了方向参数before/after来显示指示前置和后置插入。不过让人意想不到的是linsert指令并不是通过指定位置来插入，而是通过指定具体的值。这是因为在分布式环境下，列表的元素总是频繁变动的，意味着上一时刻计算的元素下标在下一时刻可能就不是你所期望的下标了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;linsert&amp;nbsp;ireader&amp;nbsp;before&amp;nbsp;java&amp;nbsp;ruby&amp;nbsp;(integer)&amp;nbsp;4&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;ruby&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;到目前位置，我还没有在实际应用中发现插入指定的应用场景。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;删除元素&lt;/span&gt;&amp;nbsp;列表的删除操作也不是通过指定下标来确定元素的，你需要指定删除的最大个数以及元素的值&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lrem&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;java&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;定长列表&lt;/span&gt;&amp;nbsp;在实际应用场景中，我们有时候会遇到「定长列表」的需求。比如要以走马灯的形式实时显示中奖用户名列表，因为中奖用户实在太多，能显示的数量一般不超过100条，那么这里就会使用到定长列表。维持定长列表的指令是ltrim，需要提供两个参数start和end，表示需要保留列表的下标范围，范围之外的所有元素都将被移除。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;javascript&amp;nbsp;ruby&amp;nbsp;erlang&amp;nbsp;rust&amp;nbsp;cpp&amp;nbsp;(integer)&amp;nbsp;8&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;ireader&amp;nbsp;-3&amp;nbsp;-1&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;erlang&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;rust&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;cpp&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果指定参数的end对应的真实下标小于start，其效果等价于del指令，因为这样的参数表示需要需要保留列表元素的下标范围为空。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164d91746fbe0442?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;120&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164d91746fbe0442?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;span style=&quot;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现Redis底层存储的还不是一个简单的linkedlist，而是称之为快速链表quicklist的一个结构。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。所以Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading-2&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4eaf9edf608d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;617&quot; data-height=&quot;288&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4eaf9edf608d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;哈希等价于Java语言的HashMap或者是Python语言的dict，在实现结构上它使用二维结构，第一维是数组，第二维是链表，hash的内容key和value存放在链表中，数组里存放的是链表的头指针。通过key查找元素时，先计算key的hashcode，然后用hashcode对数组的长度进行取模定位到链表的表头，再对链表进行遍历获取到相应的value值，链表的作用就是用来将产生了「hash碰撞」的元素串起来。Java语言开发者会感到非常熟悉，因为这样的结构和HashMap是没有区别的。哈希的第一维数组的长度也是2^n。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4dcd14c00534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;739&quot; data-height=&quot;256&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4dcd14c00534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;增加元素&lt;/span&gt;&amp;nbsp;可以使用hset一次增加一个键值对，也可以使用hmset一次增加多个键值对&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;fast&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;fast&amp;nbsp;python&amp;nbsp;slow&amp;nbsp;OK&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取元素&lt;/span&gt;&amp;nbsp;可以通过hget定位具体key对应的value，可以通过hmget获取多个key对应的value，可以使用hgetall获取所有的键值对，可以使用hkeys和hvals分别获取所有的key列表和value列表。这些操作和Java语言的Map接口是类似的。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hmset&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;fast&amp;nbsp;java&amp;nbsp;fast&amp;nbsp;python&amp;nbsp;slow&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmget&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;python&amp;nbsp;1)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;slow&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;slow&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hkeys&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hvals&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;slow&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;删除元素&lt;/span&gt;&amp;nbsp;可以使用hdel删除指定key，hdel支持同时删除多个key&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hmset&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;fast&amp;nbsp;java&amp;nbsp;fast&amp;nbsp;python&amp;nbsp;slow&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;hdel&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hdel&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;判断元素是否存在&lt;/span&gt;&amp;nbsp;通常我们使用hget获得key对应的value是否为空就直到对应的元素是否存在了，不过如果value的字符串长度特别大，通过这种方式来判断元素存在与否就略显浪费，这时可以使用hexists指令。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hmset&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;fast&amp;nbsp;java&amp;nbsp;fast&amp;nbsp;python&amp;nbsp;slow&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;hexists&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数器&lt;/span&gt;&amp;nbsp;hash结构还可以当成计数器来使用，对于内部的每一个key都可以作为独立的计数器。如果value值不是整数，调用hincrby指令会出错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;ireader&amp;nbsp;python&amp;nbsp;4&amp;nbsp;(integer)&amp;nbsp;4&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;4&amp;nbsp;(integer)&amp;nbsp;4&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;1&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;ireader&amp;nbsp;rust&amp;nbsp;good&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;ireader&amp;nbsp;rust&amp;nbsp;1&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;hash&amp;nbsp;value&amp;nbsp;is&amp;nbsp;not&amp;nbsp;an&amp;nbsp;integer&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;扩容&lt;/span&gt;&amp;nbsp;当hash内部的元素比较拥挤时(hash碰撞比较频繁)，就需要进行扩容。扩容需要申请新的两倍大小的数组，然后将所有的键值对重新分配到新的数组下标对应的链表中(rehash)。如果hash结构很大，比如有上百万个键值对，那么一次完整rehash的过程就会耗时很长。这对于单线程的Redis里来说有点压力山大。所以Redis采用了渐进式rehash的方案。它会同时保留两个新旧hash结构，在后续的定时任务以及hash结构的读写指令中将旧结构的元素逐渐迁移到新的结构中。这样就可以避免因扩容导致的线程卡顿现象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;缩容&lt;/span&gt;&amp;nbsp;Redis的hash结构不但有扩容还有缩容，从这一点出发，它要比Java的HashMap要厉害一些，Java的HashMap只有扩容。缩容的原理和扩容是一致的，只不过新的数组大小要比旧数组小一倍。&lt;/p&gt;&lt;h2 data-id=&quot;heading-3&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Java程序员都知道HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;增加元素&lt;/span&gt;&amp;nbsp;可以一次增加多个元素&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;读取元素&lt;/span&gt;&amp;nbsp;使用smembers列出所有元素，使用scard获取集合长度，使用srandmember获取随机count个元素，如果不提供count参数，默认为1&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;srandmember&amp;nbsp;ireader&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;删除元素&lt;/span&gt;&amp;nbsp;使用srem删除一到多个元素，使用spop删除随机一个元素&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;rust&amp;nbsp;erlang&amp;nbsp;(integer)&amp;nbsp;5&amp;nbsp;&amp;gt;&amp;nbsp;srem&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;ireader&amp;nbsp;&amp;quot;erlang&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;判断元素是否存在&lt;/span&gt;&amp;nbsp;使用sismember指令，只能接收单个元素&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;rust&amp;nbsp;erlang&amp;nbsp;(integer)&amp;nbsp;5&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;ireader&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;ireader&amp;nbsp;javascript&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;复制代码&lt;/pre&gt;&lt;h2 data-id=&quot;heading-4&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;sortedset&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4ec77aac6132?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;635&quot; data-height=&quot;287&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4ec77aac6132?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Map&amp;lt;String, Double&amp;gt;&lt;/code&gt;，可以给每一个元素value赋予一个权重&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;score&lt;/code&gt;，另一方面它又类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;TreeSet&lt;/code&gt;，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset底层实现使用了两个数据结构，第一个是hash，第二个是跳跃列表，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。跳跃列表的目的在于给元素value排序，根据score的范围获取元素列表。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;增加元素&lt;/span&gt;&amp;nbsp;通过zadd指令可以增加一到多个value/score对，score放在前面&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;ireader&amp;nbsp;4.0&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;ireader&amp;nbsp;4.0&amp;nbsp;java&amp;nbsp;1.0&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;长度&lt;/span&gt;&amp;nbsp;通过指令zcard可以得到zset的元素个数&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zcard&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;删除元素&lt;/span&gt;&amp;nbsp;通过指令zrem可以删除zset中的元素，可以一次删除多个&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zrem&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数器&lt;/span&gt;&amp;nbsp;同hash结构一样，zset也可以作为计数器使用。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;ireader&amp;nbsp;4.0&amp;nbsp;python&amp;nbsp;4.0&amp;nbsp;java&amp;nbsp;1.0&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zincrby&amp;nbsp;ireader&amp;nbsp;1.0&amp;nbsp;python&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取排名和分数&lt;/span&gt;&amp;nbsp;通过zscore指令获取指定元素的权重，通过zrank指令获取指定元素的正向排名，通过zrevrank指令获取指定元素的反向排名[倒数第一名]。正向是由小到大，负向是由大到小。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zscore&amp;nbsp;ireader&amp;nbsp;python&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;&amp;nbsp;#&amp;nbsp;分数低的排名考前，rank值小&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;ireader&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;zrevrank&amp;nbsp;ireader&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;根据排名范围获取元素列表&lt;/span&gt;&amp;nbsp;通过zrange指令指定排名范围参数获取对应的元素列表，携带withscores参数可以一并获取元素的权重。通过zrevrange指令按负向排名获取元素列表[倒数]。正向是由小到大，负向是由大到小。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;withscores&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;1&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;withscores&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;1&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;根据score范围获取列表&lt;/span&gt;&amp;nbsp;通过zrangebyscore指令指定score范围获取对应的元素列表。通过zrevrangebyscore指令获取倒排元素列表。正向是由小到大，负向是由大到小。参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-inf&lt;/code&gt;表示负无穷，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;+inf&lt;/code&gt;表示正无穷。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;5&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;ireader&amp;nbsp;-inf&amp;nbsp;+inf&amp;nbsp;withscores&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;1&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrangebyscore&amp;nbsp;ireader&amp;nbsp;+inf&amp;nbsp;-inf&amp;nbsp;withscores&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意正负反过来了&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;1&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;根据范围移除元素列表&lt;/span&gt;&amp;nbsp;可以通过排名范围，也可以通过score范围来一次性移除多个元素&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zremrangebyrank&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;nbsp;#&amp;nbsp;删掉了2个元素&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;ireader&amp;nbsp;4.0&amp;nbsp;java&amp;nbsp;1.0&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;zremrangebyscore&amp;nbsp;ireader&amp;nbsp;-inf&amp;nbsp;4&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;复制代码&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&amp;nbsp;zset内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。这一块的内容深度读者要有心理准备。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为zset要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c5a90442cd51a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;109&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c5a90442cd51a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照score值进行排序。这意味着当有新元素需要插入时，需要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级——部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c5bb13c6da230?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1151&quot; data-height=&quot;225&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c5bb13c6da230?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于L0、L1和L2层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层，首先L0层肯定是100%了，L1层只有50%的概率，L2层只有25%的概率，L3层只有12.5%的概率，一直随机到最顶层L31层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;','0','0','1547880711') [ RunTime:0.0168s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0006s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('46','27') [ RunTime:0.0022s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0008s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('46','/Upload/image/ueditor/redis.jpg') [ RunTime:0.0024s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0008s ]
SQL: SELECT `aid`,`addtime` FROM `lxp_article` WHERE `is_show` = 1 AND `is_delete` = 0 ORDER BY aid desc  [ RunTime:0.0007s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000030s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000057s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004523s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004551s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000096s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000141s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000335s ]
INFO: [ app_end ] --END-- [ RunTime:0.000357s ]

[ 2019-01-19T14:51:52+08:00 ] 223.72.51.0 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000208s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000288s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000315s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0032s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '46'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 46 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '45'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 45 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '44'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 44 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0001s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '43'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 43 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0001s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 41 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0001s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0001s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 42 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0001s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0001s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000047s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000074s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005663s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005690s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000090s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000109s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000335s ]
INFO: [ app_end ] --END-- [ RunTime:0.000361s ]

[ 2019-01-19T14:52:13+08:00 ] 223.72.51.0 /Admin/Article/edit/aid/46
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000249s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000270s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000301s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 46 LIMIT 1   [ RunTime:0.0006s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 46  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '46'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000087s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005865s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005900s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000107s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000130s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000326s ]
INFO: [ app_end ] --END-- [ RunTime:0.000360s ]

[ 2019-01-19T14:53:28+08:00 ] 223.72.51.0 /index.php/Admin/Index/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000208s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000297s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000324s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000078s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000103s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004555s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004579s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000082s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000101s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000315s ]
INFO: [ app_end ] --END-- [ RunTime:0.000336s ]

[ 2019-01-19T14:53:28+08:00 ] 223.72.51.0 /Admin/Index/welcome
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000206s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000293s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000320s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0010s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_chat` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_delete` = 1 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_chat` WHERE `is_show` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_comment` [ RunTime:0.0005s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_comment` LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000042s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000067s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.003629s ]
INFO: [ view_parse ] --END-- [ RunTime:0.003666s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000085s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000132s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000313s ]
INFO: [ app_end ] --END-- [ RunTime:0.000334s ]

[ 2019-01-19T14:53:30+08:00 ] 223.72.51.0 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000288s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000380s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000413s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0013s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000081s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000108s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004267s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004291s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000115s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000136s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000330s ]
INFO: [ app_end ] --END-- [ RunTime:0.000351s ]

[ 2019-01-19T14:53:33+08:00 ] 223.72.51.0 /Admin/Article/add
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000200s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000297s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000324s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0007s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0005s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000054s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000083s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004262s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004286s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000129s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000151s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000309s ]
INFO: [ app_end ] --END-- [ RunTime:0.000330s ]

[ 2019-01-19T14:53:33+08:00 ] 223.72.51.0 /Admin/Article/index
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000197s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000255s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000281s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0008s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article` WHERE `is_delete` = 0 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article` WHERE `is_delete` = 0 ORDER BY addtime desc LIMIT 0,15   [ RunTime:0.0023s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '46'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0004s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 46 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '45'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 45 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '44'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 44 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '43'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 43 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '41'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 41 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '40'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 40 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '39'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 39 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '38'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 38 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '42'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 42 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '37'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 37 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '36'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 36 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '35'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 35 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '34'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 34 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '33'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 33 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 34  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '32'  [ RunTime:0.0002s ]
SQL: SELECT `path` FROM `lxp_article_pic` WHERE `aid` = 32 ORDER BY ap_id asc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `cid`,`cid`,`cname` FROM `lxp_category` WHERE `cid` = 32  [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000044s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000070s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004852s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004877s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000095s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000116s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000317s ]
INFO: [ app_end ] --END-- [ RunTime:0.000343s ]

[ 2019-01-19T14:53:35+08:00 ] 223.72.51.0 /Admin/Article/edit/aid/46
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000200s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000260s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000287s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0007s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 46 LIMIT 1   [ RunTime:0.0016s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 46  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '46'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000085s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004874s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004898s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000086s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000106s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000301s ]
INFO: [ app_end ] --END-- [ RunTime:0.000327s ]

[ 2019-01-19T14:55:25+08:00 ] 223.72.51.0 /Admin/Article/edit/aid/46
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000232s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000258s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000296s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: UPDATE `lxp_article` SET `aid`='46',`cid`='35',`title`='Redis数据结构',`author`='鹿晓鹏',`keywords`='',`description`='这篇文章主要介绍了Redis中5种数据结构的使用场景介绍,本文对Redis中的5种数据类型String、Hash、List、Set、Sorted Set做了讲解,需要的朋友可以参考下',`is_original`='1',`is_top`='1',`is_show`='1',`content`='&lt;p&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;PingFang SC&amp;quot;, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Source Han Sans SC&amp;quot;, &amp;quot;Noto Sans CJK SC&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-serif; font-size: 15px; background-color: rgb(255, 255, 255);&quot;&gt;这篇文章主要介绍了Redis中5种数据结构的使用场景介绍,本文对Redis中的5种数据类型String、Hash、List、Set、Sorted Set做了讲解,需要的朋友可以参考下&lt;/span&gt;&lt;/p&gt;&lt;h1 data-v-07ed0d83=&quot;&quot; style=&quot;font-size: 2.5rem;margin: 0.67em 0px;line-height: 1.5&quot;&gt;通俗易懂的Redis数据结构基础教程&lt;/h1&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c6b32b5f679dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;758&quot; data-height=&quot;129&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c6b32b5f679dc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis有5个基本数据结构，string、list、hash、set和zset。它们是日常开发中使用频率非常高应用最为广泛的数据结构，把这5个数据结构都吃透了，你就掌握了Redis应用知识的一半了。&lt;/p&gt;&lt;h2 data-id=&quot;heading-0&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;string&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/22/164c182f83ceb3b5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;130&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/22/164c182f83ceb3b5?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;首先我们从string谈起。string表示的是一个可变的字节数组，我们初始化字符串的内容、可以拿到字符串的长度，可以获取string的子串，可以覆盖string的子串内容，可以追加子串。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;572&quot; data-height=&quot;169&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/24/164caaff402d2617?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;初始化字符串&lt;/span&gt;&amp;nbsp;需要提供「变量名称」和「变量的内容」&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;ireader&amp;nbsp;beijing.zhangyue.keji.gufen.youxian.gongsi&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取字符串的内容&lt;/span&gt;&amp;nbsp;提供「变量名称」&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;beijing.zhangyue.keji.gufen.youxian.gongsi&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取字符串的长度&lt;/span&gt;&amp;nbsp;提供「变量名称」&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;strlen&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;42&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取子串&lt;/span&gt;&amp;nbsp;提供「变量名称」以及开始和结束位置[start, end]&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;getrange&amp;nbsp;ireader&amp;nbsp;28&amp;nbsp;34&amp;nbsp;&amp;quot;youxian&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;覆盖子串&lt;/span&gt;&amp;nbsp;提供「变量名称」以及开始位置和目标子串&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;setrange&amp;nbsp;ireader&amp;nbsp;28&amp;nbsp;wooxian&amp;nbsp;(integer)&amp;nbsp;42&amp;nbsp;&amp;nbsp;#&amp;nbsp;返回长度&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;beijing.zhangyue.keji.gufen.wooxian.gongsi&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;追加子串&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;append&amp;nbsp;ireader&amp;nbsp;.hao&amp;nbsp;(integer)&amp;nbsp;46&amp;nbsp;#&amp;nbsp;返回长度&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;beijing.zhangyue.keji.gufen.wooxian.gongsi.hao&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;遗憾的是字符串没有提供字串插入方法和子串删除方法。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数器&lt;/span&gt;&amp;nbsp;如果字符串的内容是一个整数，那么还可以将字符串当成计数器来使用。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;ireader&amp;nbsp;42&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;42&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;incrby&amp;nbsp;ireader&amp;nbsp;100&amp;nbsp;(integer)&amp;nbsp;142&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;142&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;decrby&amp;nbsp;ireader&amp;nbsp;100&amp;nbsp;(integer)&amp;nbsp;42&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;&amp;quot;42&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;ireader&amp;nbsp;&amp;nbsp;#&amp;nbsp;等价于incrby&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;43&amp;nbsp;&amp;gt;&amp;nbsp;decr&amp;nbsp;ireader&amp;nbsp;&amp;nbsp;#&amp;nbsp;等价于decrby&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;42&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;计数器是有范围的，它不能超过Long.Max，不能低于Long.MIN&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;set&amp;nbsp;ireader&amp;nbsp;9223372036854775807&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;incr&amp;nbsp;ireader&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&amp;nbsp;&amp;gt;&amp;nbsp;set&amp;nbsp;ireader&amp;nbsp;-9223372036854775808&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;decr&amp;nbsp;ireader&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;increment&amp;nbsp;or&amp;nbsp;decrement&amp;nbsp;would&amp;nbsp;overflow&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;过期和删除&lt;/span&gt;&amp;nbsp;字符串可以使用del指令进行主动删除，可以使用expire指令设置过期时间，到点会自动删除，这属于被动删除。可以使用ttl指令获取字符串的寿命。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;expire&amp;nbsp;ireader&amp;nbsp;60&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;1表示设置成功，0表示变量ireader不存在&amp;nbsp;&amp;gt;&amp;nbsp;ttl&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;50&amp;nbsp;&amp;nbsp;#&amp;nbsp;还有50秒的寿命，返回-2表示变量不存在，-1表示没有设置过期时间&amp;nbsp;&amp;gt;&amp;nbsp;del&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;nbsp;#&amp;nbsp;删除成功返回1&amp;nbsp;&amp;gt;&amp;nbsp;get&amp;nbsp;ireader&amp;nbsp;(nil)&amp;nbsp;&amp;nbsp;#&amp;nbsp;变量ireader没有了&lt;/pre&gt;&lt;h2 data-id=&quot;heading-1&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;list&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/22/164c25d671d13466?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;133&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/22/164c25d671d13466?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Redis将列表数据结构命名为list而不是array，是因为列表的存储结构用的是链表而不是数组，而且链表还是双向链表。因为它是链表，所以随机定位性能较弱，首尾插入删除性能较优。如果list的列表长度很长，使用时我们一定要关注链表相关操作的时间复杂度。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;负下标&lt;/span&gt;&amp;nbsp;链表元素的位置使用自然数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;0,1,2,....n-1&lt;/code&gt;表示，还可以使用负数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-1,-2,...-n&lt;/code&gt;来表示，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-1&lt;/code&gt;表示「倒数第一」，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-2&lt;/code&gt;表示「倒数第二」，那么&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-n&lt;/code&gt;就表示第一个元素，对应的下标为&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;0&lt;/code&gt;。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;队列／堆栈&lt;/span&gt;&amp;nbsp;链表可以从表头和表尾追加和移除元素，结合使用rpush/rpop/lpush/lpop四条指令，可以将链表作为队列或堆栈使用，左向右向进行都可以&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;#&amp;nbsp;右进左出&amp;nbsp;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;#&amp;nbsp;左进右出&amp;nbsp;&amp;gt;&amp;nbsp;lpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;右进右出&amp;nbsp;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;rpop&amp;nbsp;ireader&amp;nbsp;&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;...&amp;nbsp;#&amp;nbsp;左进左出&amp;nbsp;&amp;gt;&amp;nbsp;lpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lpop&amp;nbsp;ireader&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;...&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;在日常应用中，列表常用来作为异步队列来使用。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;长度&lt;/span&gt;&amp;nbsp;使用llen指令获取链表长度&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;llen&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;3&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;随机读&lt;/span&gt;&amp;nbsp;可以使用lindex指令访问指定位置的元素，使用lrange指令来获取链表子元素列表，提供start和end下标参数&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lindex&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;2&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;-1表示倒数第一&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;使用lrange获取全部元素时，需要提供end_index，如果没有负下标，就需要首先通过llen指令获取长度，才可以得出end_index的值，有了负下标，使用-1代替end_index就可以达到相同的效果。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;修改元素&lt;/span&gt;&amp;nbsp;使用lset指令在指定位置修改元素。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lset&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;javascript&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;javascript&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;插入元素&lt;/span&gt;&amp;nbsp;使用linsert指令在列表的中间位置插入元素，有经验的程序员都知道在插入元素时，我们经常搞不清楚是在指定位置的前面插入还是后面插入，所以antirez在linsert指令里增加了方向参数before/after来显示指示前置和后置插入。不过让人意想不到的是linsert指令并不是通过指定位置来插入，而是通过指定具体的值。这是因为在分布式环境下，列表的元素总是频繁变动的，意味着上一时刻计算的元素下标在下一时刻可能就不是你所期望的下标了。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;linsert&amp;nbsp;ireader&amp;nbsp;before&amp;nbsp;java&amp;nbsp;ruby&amp;nbsp;(integer)&amp;nbsp;4&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;ruby&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;python&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;到目前位置，我还没有在实际应用中发现插入指定的应用场景。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;删除元素&lt;/span&gt;&amp;nbsp;列表的删除操作也不是通过指定下标来确定元素的，你需要指定删除的最大个数以及元素的值&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;lrem&amp;nbsp;ireader&amp;nbsp;1&amp;nbsp;java&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;定长列表&lt;/span&gt;&amp;nbsp;在实际应用场景中，我们有时候会遇到「定长列表」的需求。比如要以走马灯的形式实时显示中奖用户名列表，因为中奖用户实在太多，能显示的数量一般不超过100条，那么这里就会使用到定长列表。维持定长列表的指令是ltrim，需要提供两个参数start和end，表示需要保留列表的下标范围，范围之外的所有元素都将被移除。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;rpush&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;javascript&amp;nbsp;ruby&amp;nbsp;erlang&amp;nbsp;rust&amp;nbsp;cpp&amp;nbsp;(integer)&amp;nbsp;8&amp;nbsp;&amp;gt;&amp;nbsp;ltrim&amp;nbsp;ireader&amp;nbsp;-3&amp;nbsp;-1&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;lrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;erlang&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;rust&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;cpp&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;如果指定参数的end对应的真实下标小于start，其效果等价于del指令，因为这样的参数表示需要需要保留列表元素的下标范围为空。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;快速列表&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164d91746fbe0442?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;120&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/27/164d91746fbe0442?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;background-color: rgb(255, 255, 255)&quot;&gt;如果再深入一点，你会发现Redis底层存储的还不是一个简单的linkedlist，而是称之为快速链表quicklist的一个结构。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。所以Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;h2 data-id=&quot;heading-2&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;hash&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4eaf9edf608d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;617&quot; data-height=&quot;288&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4eaf9edf608d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;哈希等价于Java语言的HashMap或者是Python语言的dict，在实现结构上它使用二维结构，第一维是数组，第二维是链表，hash的内容key和value存放在链表中，数组里存放的是链表的头指针。通过key查找元素时，先计算key的hashcode，然后用hashcode对数组的长度进行取模定位到链表的表头，再对链表进行遍历获取到相应的value值，链表的作用就是用来将产生了「hash碰撞」的元素串起来。Java语言开发者会感到非常熟悉，因为这样的结构和HashMap是没有区别的。哈希的第一维数组的长度也是2^n。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4dcd14c00534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;739&quot; data-height=&quot;256&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4dcd14c00534?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;增加元素&lt;/span&gt;&amp;nbsp;可以使用hset一次增加一个键值对，也可以使用hmset一次增加多个键值对&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hset&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;fast&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hmset&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;fast&amp;nbsp;python&amp;nbsp;slow&amp;nbsp;OK&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取元素&lt;/span&gt;&amp;nbsp;可以通过hget定位具体key对应的value，可以通过hmget获取多个key对应的value，可以使用hgetall获取所有的键值对，可以使用hkeys和hvals分别获取所有的key列表和value列表。这些操作和Java语言的Map接口是类似的。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hmset&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;fast&amp;nbsp;java&amp;nbsp;fast&amp;nbsp;python&amp;nbsp;slow&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;hget&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hmget&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;python&amp;nbsp;1)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;slow&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;slow&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hkeys&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hvals&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;fast&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;slow&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;删除元素&lt;/span&gt;&amp;nbsp;可以使用hdel删除指定key，hdel支持同时删除多个key&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hmset&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;fast&amp;nbsp;java&amp;nbsp;fast&amp;nbsp;python&amp;nbsp;slow&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;hdel&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hdel&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;2&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;判断元素是否存在&lt;/span&gt;&amp;nbsp;通常我们使用hget获得key对应的value是否为空就直到对应的元素是否存在了，不过如果value的字符串长度特别大，通过这种方式来判断元素存在与否就略显浪费，这时可以使用hexists指令。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hmset&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;fast&amp;nbsp;java&amp;nbsp;fast&amp;nbsp;python&amp;nbsp;slow&amp;nbsp;OK&amp;nbsp;&amp;gt;&amp;nbsp;hexists&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;1&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数器&lt;/span&gt;&amp;nbsp;hash结构还可以当成计数器来使用，对于内部的每一个key都可以作为独立的计数器。如果value值不是整数，调用hincrby指令会出错。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;ireader&amp;nbsp;python&amp;nbsp;4&amp;nbsp;(integer)&amp;nbsp;4&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;4&amp;nbsp;(integer)&amp;nbsp;4&amp;nbsp;&amp;gt;&amp;nbsp;hgetall&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;1&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;hset&amp;nbsp;ireader&amp;nbsp;rust&amp;nbsp;good&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;hincrby&amp;nbsp;ireader&amp;nbsp;rust&amp;nbsp;1&amp;nbsp;(error)&amp;nbsp;ERR&amp;nbsp;hash&amp;nbsp;value&amp;nbsp;is&amp;nbsp;not&amp;nbsp;an&amp;nbsp;integer&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;扩容&lt;/span&gt;&amp;nbsp;当hash内部的元素比较拥挤时(hash碰撞比较频繁)，就需要进行扩容。扩容需要申请新的两倍大小的数组，然后将所有的键值对重新分配到新的数组下标对应的链表中(rehash)。如果hash结构很大，比如有上百万个键值对，那么一次完整rehash的过程就会耗时很长。这对于单线程的Redis里来说有点压力山大。所以Redis采用了渐进式rehash的方案。它会同时保留两个新旧hash结构，在后续的定时任务以及hash结构的读写指令中将旧结构的元素逐渐迁移到新的结构中。这样就可以避免因扩容导致的线程卡顿现象。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;缩容&lt;/span&gt;&amp;nbsp;Redis的hash结构不但有扩容还有缩容，从这一点出发，它要比Java的HashMap要厉害一些，Java的HashMap只有扩容。缩容的原理和扩容是一致的，只不过新的数组大小要比旧数组小一倍。&lt;/p&gt;&lt;h2 data-id=&quot;heading-3&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;set&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;Java程序员都知道HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;增加元素&lt;/span&gt;&amp;nbsp;可以一次增加多个元素&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;读取元素&lt;/span&gt;&amp;nbsp;使用smembers列出所有元素，使用scard获取集合长度，使用srandmember获取随机count个元素，如果不提供count参数，默认为1&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;smembers&amp;nbsp;ireader&amp;nbsp;1)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;scard&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;srandmember&amp;nbsp;ireader&amp;nbsp;&amp;quot;java&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;删除元素&lt;/span&gt;&amp;nbsp;使用srem删除一到多个元素，使用spop删除随机一个元素&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;rust&amp;nbsp;erlang&amp;nbsp;(integer)&amp;nbsp;5&amp;nbsp;&amp;gt;&amp;nbsp;srem&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;spop&amp;nbsp;ireader&amp;nbsp;&amp;quot;erlang&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;判断元素是否存在&lt;/span&gt;&amp;nbsp;使用sismember指令，只能接收单个元素&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;sadd&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;java&amp;nbsp;python&amp;nbsp;rust&amp;nbsp;erlang&amp;nbsp;(integer)&amp;nbsp;5&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;ireader&amp;nbsp;rust&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;sismember&amp;nbsp;ireader&amp;nbsp;javascript&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;h2 data-id=&quot;heading-4&quot; style=&quot;color: rgb(51, 51, 51);line-height: 1.5;margin-top: 35px;margin-bottom: 10px;padding-bottom: 12px;font-size: 24px;border-bottom: 1px solid rgb(236, 236, 236);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;sortedset&lt;/h2&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4ec77aac6132?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;635&quot; data-height=&quot;287&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c4ec77aac6132?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;Map&amp;lt;String, Double&amp;gt;&lt;/code&gt;，可以给每一个元素value赋予一个权重&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;score&lt;/code&gt;，另一方面它又类似于&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;TreeSet&lt;/code&gt;，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;zset底层实现使用了两个数据结构，第一个是hash，第二个是跳跃列表，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。跳跃列表的目的在于给元素value排序，根据score的范围获取元素列表。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;增加元素&lt;/span&gt;&amp;nbsp;通过zadd指令可以增加一到多个value/score对，score放在前面&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;ireader&amp;nbsp;4.0&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;ireader&amp;nbsp;4.0&amp;nbsp;java&amp;nbsp;1.0&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;2&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;长度&lt;/span&gt;&amp;nbsp;通过指令zcard可以得到zset的元素个数&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zcard&amp;nbsp;ireader&amp;nbsp;(integer)&amp;nbsp;3&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;删除元素&lt;/span&gt;&amp;nbsp;通过指令zrem可以删除zset中的元素，可以一次删除多个&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zrem&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;2&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;计数器&lt;/span&gt;&amp;nbsp;同hash结构一样，zset也可以作为计数器使用。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zadd&amp;nbsp;ireader&amp;nbsp;4.0&amp;nbsp;python&amp;nbsp;4.0&amp;nbsp;java&amp;nbsp;1.0&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;3&amp;nbsp;&amp;gt;&amp;nbsp;zincrby&amp;nbsp;ireader&amp;nbsp;1.0&amp;nbsp;python&amp;nbsp;&amp;quot;5&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;获取排名和分数&lt;/span&gt;&amp;nbsp;通过zscore指令获取指定元素的权重，通过zrank指令获取指定元素的正向排名，通过zrevrank指令获取指定元素的反向排名[倒数第一名]。正向是由小到大，负向是由大到小。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zscore&amp;nbsp;ireader&amp;nbsp;python&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;ireader&amp;nbsp;go&amp;nbsp;&amp;nbsp;#&amp;nbsp;分数低的排名考前，rank值小&amp;nbsp;(integer)&amp;nbsp;0&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;ireader&amp;nbsp;java&amp;nbsp;(integer)&amp;nbsp;1&amp;nbsp;&amp;gt;&amp;nbsp;zrank&amp;nbsp;ireader&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;zrevrank&amp;nbsp;ireader&amp;nbsp;python&amp;nbsp;(integer)&amp;nbsp;0&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;根据排名范围获取元素列表&lt;/span&gt;&amp;nbsp;通过zrange指令指定排名范围参数获取对应的元素列表，携带withscores参数可以一并获取元素的权重。通过zrevrange指令按负向排名获取元素列表[倒数]。正向是由小到大，负向是由大到小。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;&amp;nbsp;#&amp;nbsp;获取所有元素&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;withscores&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;1&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;withscores&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;1&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;根据score范围获取列表&lt;/span&gt;&amp;nbsp;通过zrangebyscore指令指定score范围获取对应的元素列表。通过zrevrangebyscore指令获取倒排元素列表。正向是由小到大，负向是由大到小。参数&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;-inf&lt;/code&gt;表示负无穷，&lt;code style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;font-size: 0.87em;padding: 0.065em 0.4em;color: rgb(255, 80, 44);background-color: rgb(255, 245, 245);border-radius: 2px;overflow-x: auto&quot;&gt;+inf&lt;/code&gt;表示正无穷。&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;5&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrangebyscore&amp;nbsp;ireader&amp;nbsp;-inf&amp;nbsp;+inf&amp;nbsp;withscores&amp;nbsp;1)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;1&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;&amp;gt;&amp;nbsp;zrevrangebyscore&amp;nbsp;ireader&amp;nbsp;+inf&amp;nbsp;-inf&amp;nbsp;withscores&amp;nbsp;&amp;nbsp;#&amp;nbsp;注意正负反过来了&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&amp;nbsp;2)&amp;nbsp;&amp;quot;5&amp;quot;&amp;nbsp;3)&amp;nbsp;&amp;quot;java&amp;quot;&amp;nbsp;4)&amp;nbsp;&amp;quot;4&amp;quot;&amp;nbsp;5)&amp;nbsp;&amp;quot;go&amp;quot;&amp;nbsp;6)&amp;nbsp;&amp;quot;1&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;根据范围移除元素列表&lt;/span&gt;&amp;nbsp;可以通过排名范围，也可以通过score范围来一次性移除多个元素&lt;/p&gt;&lt;pre style=&quot;font-family: Menlo, Monaco, Consolas, &amp;#39;Courier New&amp;#39;, monospace;line-height: 1.75;overflow: auto;position: relative;color: rgb(51, 51, 51);background-color: rgb(255, 255, 255)&quot;&gt;&amp;gt;&amp;nbsp;zremrangebyrank&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;1&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;nbsp;#&amp;nbsp;删掉了2个元素&amp;nbsp;&amp;gt;&amp;nbsp;zadd&amp;nbsp;ireader&amp;nbsp;4.0&amp;nbsp;java&amp;nbsp;1.0&amp;nbsp;go&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;zremrangebyscore&amp;nbsp;ireader&amp;nbsp;-inf&amp;nbsp;4&amp;nbsp;(integer)&amp;nbsp;2&amp;nbsp;&amp;gt;&amp;nbsp;zrange&amp;nbsp;ireader&amp;nbsp;0&amp;nbsp;-1&amp;nbsp;1)&amp;nbsp;&amp;quot;python&amp;quot;&lt;/pre&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;span style=&quot;font-weight: 700&quot;&gt;跳跃列表&lt;/span&gt;&amp;nbsp;zset内部的排序功能是通过「跳跃列表」数据结构来实现的，它的结构非常特殊，也比较复杂。这一块的内容深度读者要有心理准备。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;因为zset要支持随机的插入和删除，所以它不好使用数组来表示。我们先看一个普通的链表结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c5a90442cd51a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1280&quot; data-height=&quot;109&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c5a90442cd51a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;我们需要这个链表按照score值进行排序。这意味着当有新元素需要插入时，需要定位到特定位置的插入点，这样才可以继续保证链表是有序的。通常我们会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，链表做不到，那该怎么办？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想一个创业公司，刚开始只有几个人，团队成员之间人人平等，都是联合创始人。随着公司的成长，人数渐渐变多，团队沟通成本随之增加。这时候就会引入组长制，对团队进行划分。每个团队会有一个组长。开会的时候分团队进行，多个组长之间还会有自己的会议安排。公司规模进一步扩展，需要再增加一个层级——部门，每个部门会从组长列表中推选出一个代表来作为部长。部长们之间还会有自己的高层会议安排。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表就是类似于这种层级制，最下面一层所有的元素都会串起来。然后每隔几个元素挑选出一个代表来，再将这几个代表使用另外一级指针串起来。然后在这些代表里再挑出二级代表，再串起来。最终就形成了金字塔结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;想想你老家在世界地图中的位置：亚洲--&amp;gt;中国-&amp;gt;安徽省-&amp;gt;安庆市-&amp;gt;枞阳县-&amp;gt;汤沟镇-&amp;gt;田间村-&amp;gt;xxxx号，也是这样一个类似的结构。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;margin: 22px auto;text-align: center;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;img class=&quot;lazyload inited loaded&quot; data-src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c5bb13c6da230?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; data-width=&quot;1151&quot; data-height=&quot;225&quot; src=&quot;https://user-gold-cdn.xitu.io/2018/7/23/164c5bb13c6da230?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; style=&quot;width: auto;height: auto;border-style: none;max-height: none;max-width: 100%;visibility: visible;background-color: transparent;background-position: 50% center;background-repeat: no-repeat;background-image: none;cursor: zoom-in&quot;/&gt;&lt;figcaption style=&quot;font-size: 1rem;line-height: 1.6;color: rgb(144, 144, 144);margin-top: 2px&quot;&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;「跳跃列表」之所以「跳跃」，是因为内部的元素可能「身兼数职」，比如上图中间的这个元素，同时处于L0、L1和L2层，可以快速在不同层次之间进行「跳跃」。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;定位插入点时，先在顶层进行定位，然后下潜到下一级定位，一直下潜到最底层找到合适的位置，将新元素插进去。你也许会问那新插入的元素如何才有机会「身兼数职」呢？&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;跳跃列表采取一个随机策略来决定新元素可以兼职到第几层，首先L0层肯定是100%了，L1层只有50%的概率，L2层只有25%的概率，L3层只有12.5%的概率，一直随机到最顶层L31层。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，能进入到顶层的概率就会越大。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;这还挺公平的，能不能进入中央不是靠拼爹，而是看运气。&lt;/p&gt;&lt;p style=&quot;line-height: inherit;margin-top: 22px;margin-bottom: 22px;color: rgb(51, 51, 51);font-family: -apple-system, &amp;#39;PingFang SC&amp;#39;, &amp;#39;Hiragino Sans GB&amp;#39;, &amp;#39;Microsoft YaHei&amp;#39;, &amp;#39;Helvetica Neue&amp;#39;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255)&quot;&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;' WHERE `aid` = 46 [ RunTime:0.0088s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0005s ]
SQL: DELETE FROM `lxp_article_tag` WHERE `aid` = 46 [ RunTime:0.0021s ]
SQL: INSERT INTO `lxp_article_tag` (`aid`,`tid`) VALUES ('46','27') [ RunTime:0.0026s ]
SQL: SHOW COLUMNS FROM `lxp_article_pic` [ RunTime:0.0006s ]
SQL: DELETE FROM `lxp_article_pic` WHERE `aid` = 46 [ RunTime:0.0013s ]
SQL: INSERT INTO `lxp_article_pic` (`aid`,`path`) VALUES ('46','/Upload/image/ueditor/redis.jpg') [ RunTime:0.0021s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000028s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000053s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.003311s ]
INFO: [ view_parse ] --END-- [ RunTime:0.003356s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000078s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000121s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000314s ]
INFO: [ app_end ] --END-- [ RunTime:0.000347s ]

[ 2019-01-19T14:55:26+08:00 ] 223.72.51.0 /Admin/Article/edit/aid/46
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000210s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000321s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000348s ]
SQL: SHOW COLUMNS FROM `lxp_article` [ RunTime:0.0009s ]
SQL: SELECT * FROM `lxp_article` WHERE `aid` = 46 LIMIT 1   [ RunTime:0.0025s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT `tid` FROM `lxp_article_tag` WHERE `aid` = 46  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0010s ]
SQL: SELECT * FROM `lxp_article_tag` INNER JOIN lxp_tag ON lxp_article_tag.tid=lxp_tag.tid  WHERE `aid` = '46'  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `lxp_category` [ RunTime:0.0005s ]
SQL: SELECT `cid`,`cid`,`cname`,`keywords` FROM `lxp_category` WHERE `cid` = 35  [ RunTime:0.0002s ]
SQL: SELECT * FROM `lxp_category` ORDER BY sort  [ RunTime:0.0002s ]
SQL: SHOW COLUMNS FROM `lxp_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `lxp_tag`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `lxp_article_tag` [ RunTime:0.0004s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 21 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 22 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 23 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 24 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 25 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 26 LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT COUNT(*) AS tp_count FROM `lxp_article_tag` WHERE `tid` = 27 LIMIT 1   [ RunTime:0.0002s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000092s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.005066s ]
INFO: [ view_parse ] --END-- [ RunTime:0.005092s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000113s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000134s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000362s ]
INFO: [ app_end ] --END-- [ RunTime:0.000389s ]

